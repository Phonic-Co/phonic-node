/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";

describe("Agents", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            agents: [
                {
                    id: "id",
                    name: "name",
                    phone_number: "phone_number",
                    project: { id: "id", name: "name" },
                    timezone: "America/Los_Angeles",
                    voice_id: "sarah",
                    audio_format: "pcm_44100",
                    welcome_message: "welcome_message",
                    system_prompt: "system_prompt",
                    template_variables: { customer_name: {}, subject: { default_value: "Chess" } },
                    tools: ["keypad_input"],
                    tasks: [{ name: "name", description: "description" }],
                    no_input_poke_sec: 1,
                    no_input_poke_text: "no_input_poke_text",
                    no_input_end_conversation_sec: 1,
                    boosted_keywords: ["boosted_keywords"],
                    configuration_endpoint: {
                        url: "https://api.example.com/config",
                        headers: { Authorization: "Bearer token123" },
                        timeout_ms: 1,
                    },
                },
            ],
        };
        server.mockEndpoint().get("/agents").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agents.list();
        expect(response).toEqual({
            agents: [
                {
                    id: "id",
                    name: "name",
                    phone_number: "phone_number",
                    project: {
                        id: "id",
                        name: "name",
                    },
                    timezone: "America/Los_Angeles",
                    voice_id: "sarah",
                    audio_format: "pcm_44100",
                    welcome_message: "welcome_message",
                    system_prompt: "system_prompt",
                    template_variables: {
                        customer_name: {},
                        subject: {
                            default_value: "Chess",
                        },
                    },
                    tools: ["keypad_input"],
                    tasks: [
                        {
                            name: "name",
                            description: "description",
                        },
                    ],
                    no_input_poke_sec: 1,
                    no_input_poke_text: "no_input_poke_text",
                    no_input_end_conversation_sec: 1,
                    boosted_keywords: ["boosted_keywords"],
                    configuration_endpoint: {
                        url: "https://api.example.com/config",
                        headers: {
                            Authorization: "Bearer token123",
                        },
                        timeout_ms: 1,
                    },
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "sarah",
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: { customer_name: {}, subject: { default_value: "Chess" } },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: { Authorization: "Bearer token123" },
                timeout_ms: 7000,
            },
        };
        const rawResponseBody = { id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783", name: "support-agent" };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.create({
            body: {
                name: "support-agent",
                phone_number: "assign-automatically",
                timezone: "America/Los_Angeles",
                voice_id: "sarah",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: {
                    customer_name: {},
                    subject: {
                        default_value: "Chess",
                    },
                },
                tools: ["keypad_input"],
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                boosted_keywords: ["Load ID", "dispatch"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: {
                        Authorization: "Bearer token123",
                    },
                    timeout_ms: 7000,
                },
            },
        });
        expect(response).toEqual({
            id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
            name: "support-agent",
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "sarah",
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: { customer_name: {}, subject: { default_value: "Chess" } },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: { Authorization: "Bearer token123" },
                timeout_ms: 7000,
            },
        };
        const rawResponseBody = {
            agent: {
                id: "id",
                name: "name",
                phone_number: "phone_number",
                project: { id: "id", name: "name" },
                timezone: "America/Los_Angeles",
                voice_id: "sarah",
                audio_format: "pcm_44100",
                welcome_message: "welcome_message",
                system_prompt: "system_prompt",
                template_variables: { customer_name: {}, subject: { default_value: "Chess" } },
                tools: ["keypad_input"],
                tasks: [{ name: "name", description: "description" }],
                no_input_poke_sec: 1,
                no_input_poke_text: "no_input_poke_text",
                no_input_end_conversation_sec: 1,
                boosted_keywords: ["boosted_keywords"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: { Authorization: "Bearer token123" },
                    timeout_ms: 1,
                },
            },
            inserted: true,
            updated: false,
        };
        server
            .mockEndpoint()
            .put("/agents/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.upsert({
            name: "support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "sarah",
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: {
                customer_name: {},
                subject: {
                    default_value: "Chess",
                },
            },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: {
                    Authorization: "Bearer token123",
                },
                timeout_ms: 7000,
            },
        });
        expect(response).toEqual({
            agent: {
                id: "id",
                name: "name",
                phone_number: "phone_number",
                project: {
                    id: "id",
                    name: "name",
                },
                timezone: "America/Los_Angeles",
                voice_id: "sarah",
                audio_format: "pcm_44100",
                welcome_message: "welcome_message",
                system_prompt: "system_prompt",
                template_variables: {
                    customer_name: {},
                    subject: {
                        default_value: "Chess",
                    },
                },
                tools: ["keypad_input"],
                tasks: [
                    {
                        name: "name",
                        description: "description",
                    },
                ],
                no_input_poke_sec: 1,
                no_input_poke_text: "no_input_poke_text",
                no_input_end_conversation_sec: 1,
                boosted_keywords: ["boosted_keywords"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: {
                        Authorization: "Bearer token123",
                    },
                    timeout_ms: 1,
                },
            },
            inserted: true,
            updated: false,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            agent: {
                id: "id",
                name: "name",
                phone_number: "phone_number",
                project: { id: "id", name: "name" },
                timezone: "America/Los_Angeles",
                voice_id: "sarah",
                audio_format: "pcm_44100",
                welcome_message: "welcome_message",
                system_prompt: "system_prompt",
                template_variables: { customer_name: {}, subject: { default_value: "Chess" } },
                tools: ["keypad_input"],
                tasks: [{ name: "name", description: "description" }],
                no_input_poke_sec: 1,
                no_input_poke_text: "no_input_poke_text",
                no_input_end_conversation_sec: 1,
                boosted_keywords: ["boosted_keywords"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: { Authorization: "Bearer token123" },
                    timeout_ms: 1,
                },
            },
        };
        server.mockEndpoint().get("/agents/nameOrId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agents.get("nameOrId");
        expect(response).toEqual({
            agent: {
                id: "id",
                name: "name",
                phone_number: "phone_number",
                project: {
                    id: "id",
                    name: "name",
                },
                timezone: "America/Los_Angeles",
                voice_id: "sarah",
                audio_format: "pcm_44100",
                welcome_message: "welcome_message",
                system_prompt: "system_prompt",
                template_variables: {
                    customer_name: {},
                    subject: {
                        default_value: "Chess",
                    },
                },
                tools: ["keypad_input"],
                tasks: [
                    {
                        name: "name",
                        description: "description",
                    },
                ],
                no_input_poke_sec: 1,
                no_input_poke_text: "no_input_poke_text",
                no_input_end_conversation_sec: 1,
                boosted_keywords: ["boosted_keywords"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: {
                        Authorization: "Bearer token123",
                    },
                    timeout_ms: 1,
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .delete("/agents/nameOrId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.delete("nameOrId");
        expect(response).toEqual({
            success: true,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "updated-support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "sarah",
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: { customer_name: {}, subject: { default_value: "Chess" } },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: { Authorization: "Bearer token123" },
                timeout_ms: 7000,
            },
        };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .patch("/agents/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.update("nameOrId", {
            name: "updated-support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "sarah",
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: {
                customer_name: {},
                subject: {
                    default_value: "Chess",
                },
            },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: {
                    Authorization: "Bearer token123",
                },
                timeout_ms: 7000,
            },
        });
        expect(response).toEqual({
            success: true,
        });
    });
});
