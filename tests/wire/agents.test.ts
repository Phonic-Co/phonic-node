/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";
import * as Phonic from "../../src/api/index";

describe("Agents", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            agents: [
                {
                    id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                    name: "support-agent",
                    phone_number: "+1234567890",
                    project: { id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad", name: "customer-support" },
                    timezone: "America/Los_Angeles",
                    voice_id: "grant",
                    audio_format: "pcm_44100",
                    audio_speed: 1,
                    background_noise_level: 0,
                    background_noise: "office",
                    welcome_message: "Hi {{customer_name}}. How can I help you today?",
                    system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                    template_variables: {
                        customer_name: { default_value: "Sean" },
                        subject: { default_value: "Chess" },
                    },
                    tools: ["keypad_input"],
                    tasks: [
                        { name: "Check Availability", description: "Check if the appointment is available" },
                        { name: "Book Appointment", description: "Book the appointment" },
                    ],
                    no_input_poke_sec: 30,
                    no_input_poke_text: "Are you still there?",
                    no_input_end_conversation_sec: 180,
                    languages: ["en", "es"],
                    boosted_keywords: ["Load ID", "dispatch"],
                    configuration_endpoint: {
                        url: "https://api.example.com/config",
                        headers: { Authorization: "Bearer token123" },
                        timeout_ms: 7000,
                    },
                },
            ],
        };
        server.mockEndpoint().get("/agents").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agents.list();
        expect(response).toEqual({
            agents: [
                {
                    id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                    name: "support-agent",
                    phone_number: "+1234567890",
                    project: {
                        id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                        name: "customer-support",
                    },
                    timezone: "America/Los_Angeles",
                    voice_id: "grant",
                    audio_format: "pcm_44100",
                    audio_speed: 1,
                    background_noise_level: 0,
                    background_noise: "office",
                    welcome_message: "Hi {{customer_name}}. How can I help you today?",
                    system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                    template_variables: {
                        customer_name: {
                            default_value: "Sean",
                        },
                        subject: {
                            default_value: "Chess",
                        },
                    },
                    tools: ["keypad_input"],
                    tasks: [
                        {
                            name: "Check Availability",
                            description: "Check if the appointment is available",
                        },
                        {
                            name: "Book Appointment",
                            description: "Book the appointment",
                        },
                    ],
                    no_input_poke_sec: 30,
                    no_input_poke_text: "Are you still there?",
                    no_input_end_conversation_sec: 180,
                    languages: ["en", "es"],
                    boosted_keywords: ["Load ID", "dispatch"],
                    configuration_endpoint: {
                        url: "https://api.example.com/config",
                        headers: {
                            Authorization: "Bearer token123",
                        },
                        timeout_ms: 7000,
                    },
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/agents").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.list();
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server.mockEndpoint().get("/agents").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.list();
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "grant",
            audio_speed: 1,
            background_noise_level: 0,
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: { customer_name: { default_value: null }, subject: { default_value: "Chess" } },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            languages: ["en", "es"],
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: { Authorization: "Bearer token123" },
                timeout_ms: 7000,
            },
        };
        const rawResponseBody = { id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783", name: "support-agent" };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.create({
            project: "main",
            name: "support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "grant",
            audio_speed: 1,
            background_noise_level: 0,
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: {
                customer_name: {
                    default_value: null,
                },
                subject: {
                    default_value: "Chess",
                },
            },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            languages: ["en", "es"],
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: {
                    Authorization: "Bearer token123",
                },
                timeout_ms: 7000,
            },
        });
        expect(response).toEqual({
            id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
            name: "support-agent",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.create({
                name: "name",
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.create({
                name: "name",
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.create({
                name: "name",
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.create({
                name: "name",
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("upsert (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "grant",
            audio_speed: 1,
            background_noise_level: 0,
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: { customer_name: { default_value: null }, subject: { default_value: "Chess" } },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            languages: ["en", "es"],
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: { Authorization: "Bearer token123" },
                timeout_ms: 7000,
            },
        };
        const rawResponseBody = {
            agent: {
                id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                name: "support-agent",
                phone_number: "+1234567890",
                project: { id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad", name: "customer-support" },
                timezone: "America/Los_Angeles",
                voice_id: "grant",
                audio_format: "pcm_44100",
                audio_speed: 1,
                background_noise_level: 0,
                background_noise: "office",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: { customer_name: { default_value: "Sean" }, subject: { default_value: "Chess" } },
                tools: ["keypad_input"],
                tasks: [
                    { name: "Check Availability", description: "Check if the appointment is available" },
                    { name: "Book Appointment", description: "Book the appointment" },
                ],
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                languages: ["en", "es"],
                boosted_keywords: ["Load ID", "dispatch"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: { Authorization: "Bearer token123" },
                    timeout_ms: 7000,
                },
            },
            inserted: true,
            updated: false,
        };
        server
            .mockEndpoint()
            .put("/agents/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.upsert({
            project: "main",
            name: "support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "grant",
            audio_speed: 1,
            background_noise_level: 0,
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: {
                customer_name: {
                    default_value: null,
                },
                subject: {
                    default_value: "Chess",
                },
            },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            languages: ["en", "es"],
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: {
                    Authorization: "Bearer token123",
                },
                timeout_ms: 7000,
            },
        });
        expect(response).toEqual({
            agent: {
                id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                name: "support-agent",
                phone_number: "+1234567890",
                project: {
                    id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                    name: "customer-support",
                },
                timezone: "America/Los_Angeles",
                voice_id: "grant",
                audio_format: "pcm_44100",
                audio_speed: 1,
                background_noise_level: 0,
                background_noise: "office",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: {
                    customer_name: {
                        default_value: "Sean",
                    },
                    subject: {
                        default_value: "Chess",
                    },
                },
                tools: ["keypad_input"],
                tasks: [
                    {
                        name: "Check Availability",
                        description: "Check if the appointment is available",
                    },
                    {
                        name: "Book Appointment",
                        description: "Book the appointment",
                    },
                ],
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                languages: ["en", "es"],
                boosted_keywords: ["Load ID", "dispatch"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: {
                        Authorization: "Bearer token123",
                    },
                    timeout_ms: 7000,
                },
            },
            inserted: true,
            updated: false,
        });
    });

    test("upsert (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/agents/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.upsert({
                name: "name",
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("upsert (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/agents/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.upsert({
                name: "name",
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            agent: {
                id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                name: "support-agent",
                phone_number: "+1234567890",
                project: { id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad", name: "customer-support" },
                timezone: "America/Los_Angeles",
                voice_id: "grant",
                audio_format: "pcm_44100",
                audio_speed: 1,
                background_noise_level: 0,
                background_noise: "office",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: { customer_name: { default_value: "Sean" }, subject: { default_value: "Chess" } },
                tools: ["keypad_input"],
                tasks: [
                    { name: "Check Availability", description: "Check if the appointment is available" },
                    { name: "Book Appointment", description: "Book the appointment" },
                ],
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                languages: ["en", "es"],
                boosted_keywords: ["Load ID", "dispatch"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: { Authorization: "Bearer token123" },
                    timeout_ms: 7000,
                },
            },
        };
        server.mockEndpoint().get("/agents/nameOrId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agents.get("nameOrId", {
            project: "main",
        });
        expect(response).toEqual({
            agent: {
                id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                name: "support-agent",
                phone_number: "+1234567890",
                project: {
                    id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                    name: "customer-support",
                },
                timezone: "America/Los_Angeles",
                voice_id: "grant",
                audio_format: "pcm_44100",
                audio_speed: 1,
                background_noise_level: 0,
                background_noise: "office",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: {
                    customer_name: {
                        default_value: "Sean",
                    },
                    subject: {
                        default_value: "Chess",
                    },
                },
                tools: ["keypad_input"],
                tasks: [
                    {
                        name: "Check Availability",
                        description: "Check if the appointment is available",
                    },
                    {
                        name: "Book Appointment",
                        description: "Book the appointment",
                    },
                ],
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                languages: ["en", "es"],
                boosted_keywords: ["Load ID", "dispatch"],
                configuration_endpoint: {
                    url: "https://api.example.com/config",
                    headers: {
                        Authorization: "Bearer token123",
                    },
                    timeout_ms: 7000,
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/agents/nameOrId").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.get("nameOrId");
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/agents/nameOrId").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.get("nameOrId");
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .delete("/agents/nameOrId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.delete("nameOrId", {
            project: "main",
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/agents/nameOrId")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.delete("nameOrId");
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/agents/nameOrId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.delete("nameOrId");
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "updated-support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "grant",
            audio_speed: 1,
            background_noise_level: 0,
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: { customer_name: { default_value: null }, subject: { default_value: "Chess" } },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            languages: ["en", "es"],
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: { Authorization: "Bearer token123" },
                timeout_ms: 7000,
            },
        };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .patch("/agents/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.update("nameOrId", {
            project: "main",
            name: "updated-support-agent",
            phone_number: "assign-automatically",
            timezone: "America/Los_Angeles",
            voice_id: "grant",
            audio_speed: 1,
            background_noise_level: 0,
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: {
                customer_name: {
                    default_value: null,
                },
                subject: {
                    default_value: "Chess",
                },
            },
            tools: ["keypad_input"],
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            languages: ["en", "es"],
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                url: "https://api.example.com/config",
                headers: {
                    Authorization: "Bearer token123",
                },
                timeout_ms: 7000,
            },
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: undefined,
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/agents/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.update("nameOrId", {
                name: undefined,
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: undefined,
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/agents/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.update("nameOrId", {
                name: undefined,
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: undefined,
            phone_number: null,
            timezone: undefined,
            voice_id: undefined,
            audio_format: undefined,
            audio_speed: undefined,
            background_noise_level: undefined,
            background_noise: undefined,
            welcome_message: undefined,
            system_prompt: undefined,
            template_variables: undefined,
            tools: undefined,
            tasks: undefined,
            no_input_poke_sec: undefined,
            no_input_poke_text: undefined,
            no_input_end_conversation_sec: undefined,
            languages: undefined,
            boosted_keywords: undefined,
            configuration_endpoint: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/agents/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.update("nameOrId", {
                name: undefined,
                phone_number: null,
                timezone: undefined,
                voice_id: undefined,
                audio_format: undefined,
                audio_speed: undefined,
                background_noise_level: undefined,
                background_noise: undefined,
                welcome_message: undefined,
                system_prompt: undefined,
                template_variables: undefined,
                tools: undefined,
                tasks: undefined,
                no_input_poke_sec: undefined,
                no_input_poke_text: undefined,
                no_input_end_conversation_sec: undefined,
                languages: undefined,
                boosted_keywords: undefined,
                configuration_endpoint: undefined,
            });
        }).rejects.toThrow(Phonic.NotFoundError);
    });
});
