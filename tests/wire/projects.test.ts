/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";

describe("Projects", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { projects: [{ id: "id", name: "name", default_agent: { id: "id", name: "name" } }] };
        server.mockEndpoint().get("/projects").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.projects.list();
        expect(response).toEqual({
            projects: [
                {
                    id: "id",
                    name: "name",
                    default_agent: {
                        id: "id",
                        name: "name",
                    },
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { project: { id: "id", name: "name", default_agent: { id: "id", name: "name" } } };
        server.mockEndpoint().get("/projects/nameOrId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.projects.get("nameOrId");
        expect(response).toEqual({
            project: {
                id: "id",
                name: "name",
                default_agent: {
                    id: "id",
                    name: "name",
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .delete("/projects/nameOrId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.delete("nameOrId");
        expect(response).toEqual({
            success: true,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "updated-customer-support", default_agent: "another-agent" };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.update("nameOrId", {
            name: "updated-customer-support",
            default_agent: "another-agent",
        });
        expect(response).toEqual({
            success: true,
        });
    });
});
