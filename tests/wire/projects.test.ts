/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";
import * as Phonic from "../../src/api/index";

describe("Projects", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            projects: [
                {
                    id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                    name: "customer-support",
                    default_agent: { id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783", name: "support-agent" },
                },
            ],
        };
        server.mockEndpoint().get("/projects").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.projects.list();
        expect(response).toEqual({
            projects: [
                {
                    id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                    name: "customer-support",
                    default_agent: {
                        id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                        name: "support-agent",
                    },
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server.mockEndpoint().get("/projects").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.projects.list();
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server.mockEndpoint().get("/projects").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.projects.list();
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "customer-support" };
        const rawResponseBody = { id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad", name: "customer-support" };
        server
            .mockEndpoint()
            .post("/projects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.create({
            name: "customer-support",
        });
        expect(response).toEqual({
            id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
            name: "customer-support",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/projects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.create({
                name: "name",
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .post("/projects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.create({
                name: "name",
            });
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/projects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.create({
                name: "name",
            });
        }).rejects.toThrow(Phonic.ConflictError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .post("/projects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.create({
                name: "name",
            });
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            project: {
                id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                name: "customer-support",
                default_agent: { id: "id", name: "name" },
            },
        };
        server.mockEndpoint().get("/projects/nameOrId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.projects.get("nameOrId");
        expect(response).toEqual({
            project: {
                id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                name: "customer-support",
                default_agent: {
                    id: "id",
                    name: "name",
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server.mockEndpoint().get("/projects/nameOrId").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.projects.get("nameOrId");
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/projects/nameOrId").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.projects.get("nameOrId");
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/projects/nameOrId").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.projects.get("nameOrId");
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server.mockEndpoint().get("/projects/nameOrId").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.projects.get("nameOrId");
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .delete("/projects/nameOrId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.delete("nameOrId");
        expect(response).toEqual({
            success: true,
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .delete("/projects/nameOrId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.delete("nameOrId");
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/projects/nameOrId")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.delete("nameOrId");
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/projects/nameOrId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.delete("nameOrId");
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .delete("/projects/nameOrId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.delete("nameOrId");
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "updated-customer-support", default_agent: "another-agent" };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.update("nameOrId", {
            name: "updated-customer-support",
            default_agent: "another-agent",
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, default_agent: null };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.update("nameOrId", {
                name: undefined,
                default_agent: null,
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, default_agent: null };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.update("nameOrId", {
                name: undefined,
                default_agent: null,
            });
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, default_agent: null };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.update("nameOrId", {
                name: undefined,
                default_agent: null,
            });
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, default_agent: null };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.update("nameOrId", {
                name: undefined,
                default_agent: null,
            });
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, default_agent: null };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.update("nameOrId", {
                name: undefined,
                default_agent: null,
            });
        }).rejects.toThrow(Phonic.ConflictError);
    });

    test("update (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, default_agent: null };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .patch("/projects/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.update("nameOrId", {
                name: undefined,
                default_agent: null,
            });
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("list_eval_prompts (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            conversation_eval_prompts: [
                {
                    id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
                    name: "chocolate_usage",
                    prompt: "The assistant used the word chocolate in the conversation",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/projects/id/conversation_eval_prompts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.listEvalPrompts("id");
        expect(response).toEqual({
            conversation_eval_prompts: [
                {
                    id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
                    name: "chocolate_usage",
                    prompt: "The assistant used the word chocolate in the conversation",
                },
            ],
        });
    });

    test("list_eval_prompts (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .get("/projects/id/conversation_eval_prompts")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.listEvalPrompts("id");
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("list_eval_prompts (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/projects/id/conversation_eval_prompts")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.listEvalPrompts("id");
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("list_eval_prompts (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/projects/id/conversation_eval_prompts")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.listEvalPrompts("id");
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("list_eval_prompts (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .get("/projects/id/conversation_eval_prompts")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.listEvalPrompts("id");
        }).rejects.toThrow(Phonic.InternalServerError);
    });

    test("create_eval_prompt (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "test_prompt",
            prompt: "The assistant used the word chocolate in the conversation",
        };
        const rawResponseBody = { id: "conv_eval_prompt_c818e617-59f9-4f43-936e-ca8a794f9ccf" };
        server
            .mockEndpoint()
            .post("/projects/id/conversation_eval_prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.projects.createEvalPrompt("id", {
            name: "test_prompt",
            prompt: "The assistant used the word chocolate in the conversation",
        });
        expect(response).toEqual({
            id: "conv_eval_prompt_c818e617-59f9-4f43-936e-ca8a794f9ccf",
        });
    });

    test("create_eval_prompt (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name", prompt: "prompt" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/projects/id/conversation_eval_prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.createEvalPrompt("id", {
                name: "name",
                prompt: "prompt",
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("create_eval_prompt (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name", prompt: "prompt" };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .post("/projects/id/conversation_eval_prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.createEvalPrompt("id", {
                name: "name",
                prompt: "prompt",
            });
        }).rejects.toThrow(Phonic.UnauthorizedError);
    });

    test("create_eval_prompt (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name", prompt: "prompt" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/projects/id/conversation_eval_prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.createEvalPrompt("id", {
                name: "name",
                prompt: "prompt",
            });
        }).rejects.toThrow(Phonic.ForbiddenError);
    });

    test("create_eval_prompt (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name", prompt: "prompt" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/projects/id/conversation_eval_prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.createEvalPrompt("id", {
                name: "name",
                prompt: "prompt",
            });
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("create_eval_prompt (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name", prompt: "prompt" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/projects/id/conversation_eval_prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.createEvalPrompt("id", {
                name: "name",
                prompt: "prompt",
            });
        }).rejects.toThrow(Phonic.ConflictError);
    });

    test("create_eval_prompt (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: "name", prompt: "prompt" };
        const rawResponseBody = { error: undefined };
        server
            .mockEndpoint()
            .post("/projects/id/conversation_eval_prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.projects.createEvalPrompt("id", {
                name: "name",
                prompt: "prompt",
            });
        }).rejects.toThrow(Phonic.InternalServerError);
    });
});
