/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";

describe("Tools", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            twilioAccountSid: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            tools: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    project: { id: "id", name: "name" },
                    type: "custom_webhook",
                    execution_mode: "sync",
                    parameters: [{ type: "string", name: "name", description: "description", is_required: true }],
                    endpoint_method: "POST",
                    endpoint_url: "endpoint_url",
                    endpoint_headers: { key: "value" },
                    endpoint_timeout_ms: 1,
                    tool_call_output_timeout_ms: 1,
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    project: { id: "id", name: "name" },
                    type: "custom_webhook",
                    execution_mode: "sync",
                    parameters: [{ type: "string", name: "name", description: "description", is_required: true }],
                    endpoint_method: "POST",
                    endpoint_url: "endpoint_url",
                    endpoint_headers: { key: "value" },
                    endpoint_timeout_ms: 1,
                    tool_call_output_timeout_ms: 1,
                },
            ],
        };
        server.mockEndpoint().get("/tools").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.list();
        expect(response).toEqual({
            tools: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    project: {
                        id: "id",
                        name: "name",
                    },
                    type: "custom_webhook",
                    execution_mode: "sync",
                    parameters: [
                        {
                            type: "string",
                            name: "name",
                            description: "description",
                            is_required: true,
                        },
                    ],
                    endpoint_method: "POST",
                    endpoint_url: "endpoint_url",
                    endpoint_headers: {
                        key: "value",
                    },
                    endpoint_timeout_ms: 1,
                    tool_call_output_timeout_ms: 1,
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    project: {
                        id: "id",
                        name: "name",
                    },
                    type: "custom_webhook",
                    execution_mode: "sync",
                    parameters: [
                        {
                            type: "string",
                            name: "name",
                            description: "description",
                            is_required: true,
                        },
                    ],
                    endpoint_method: "POST",
                    endpoint_url: "endpoint_url",
                    endpoint_headers: {
                        key: "value",
                    },
                    endpoint_timeout_ms: 1,
                    tool_call_output_timeout_ms: 1,
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            twilioAccountSid: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "book_appointment",
            description: "Books an appointment in the calendar system",
            type: "custom_webhook",
            execution_mode: "sync",
            parameters: [
                {
                    type: "string",
                    name: "date",
                    description: "The date for the appointment in YYYY-MM-DD format",
                    is_required: true,
                },
                {
                    type: "string",
                    name: "time",
                    description: "The time for the appointment in HH:MM format",
                    is_required: true,
                },
            ],
            endpoint_method: "POST",
            endpoint_url: "https://api.example.com/book-appointment",
            endpoint_headers: { Authorization: "Bearer token123", "Content-Type": "application/json" },
            endpoint_timeout_ms: 5000,
        };
        const rawResponseBody = { id: "tool_12cf6e88-c254-4d3e-a149-ddf1bdd2254c", name: "book_appointment" };
        server
            .mockEndpoint()
            .post("/tools")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.create({
            name: "book_appointment",
            description: "Books an appointment in the calendar system",
            type: "custom_webhook",
            execution_mode: "sync",
            parameters: [
                {
                    type: "string",
                    name: "date",
                    description: "The date for the appointment in YYYY-MM-DD format",
                    is_required: true,
                },
                {
                    type: "string",
                    name: "time",
                    description: "The time for the appointment in HH:MM format",
                    is_required: true,
                },
            ],
            endpoint_method: "POST",
            endpoint_url: "https://api.example.com/book-appointment",
            endpoint_headers: {
                Authorization: "Bearer token123",
                "Content-Type": "application/json",
            },
            endpoint_timeout_ms: 5000,
        });
        expect(response).toEqual({
            id: "tool_12cf6e88-c254-4d3e-a149-ddf1bdd2254c",
            name: "book_appointment",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            twilioAccountSid: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            tool: {
                id: "id",
                name: "name",
                description: "description",
                project: { id: "id", name: "name" },
                type: "custom_webhook",
                execution_mode: "sync",
                parameters: [{ type: "string", name: "name", description: "description", is_required: true }],
                endpoint_method: "POST",
                endpoint_url: "endpoint_url",
                endpoint_headers: { key: "value" },
                endpoint_timeout_ms: 1,
                tool_call_output_timeout_ms: 1,
            },
        };
        server.mockEndpoint().get("/tools/nameOrId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.get("nameOrId");
        expect(response).toEqual({
            tool: {
                id: "id",
                name: "name",
                description: "description",
                project: {
                    id: "id",
                    name: "name",
                },
                type: "custom_webhook",
                execution_mode: "sync",
                parameters: [
                    {
                        type: "string",
                        name: "name",
                        description: "description",
                        is_required: true,
                    },
                ],
                endpoint_method: "POST",
                endpoint_url: "endpoint_url",
                endpoint_headers: {
                    key: "value",
                },
                endpoint_timeout_ms: 1,
                tool_call_output_timeout_ms: 1,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            twilioAccountSid: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server.mockEndpoint().delete("/tools/nameOrId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.delete("nameOrId");
        expect(response).toEqual({
            success: true,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            twilioAccountSid: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            description: "Updated description for booking appointments with enhanced features",
            endpoint_headers: { Authorization: "Bearer updated_token456" },
            endpoint_timeout_ms: 7000,
        };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .patch("/tools/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.update("nameOrId", {
            description: "Updated description for booking appointments with enhanced features",
            endpoint_headers: {
                Authorization: "Bearer updated_token456",
            },
            endpoint_timeout_ms: 7000,
        });
        expect(response).toEqual({
            success: true,
        });
    });
});
