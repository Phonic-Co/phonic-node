/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";

describe("Conversations", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            conversation: {
                id: "id",
                workspace: "workspace",
                external_id: "external_id",
                model: "model",
                welcome_message: "welcome_message",
                input_format: "input_format",
                output_format: "output_format",
                live_transcript: "live_transcript",
                post_call_transcript: "post_call_transcript",
                duration_ms: 1.1,
                audio_url: "audio_url",
                started_at: "2024-01-15T09:30:00Z",
                ended_at: "2024-01-15T09:30:00Z",
                items: [
                    {
                        item_idx: 1,
                        role: "user",
                        live_transcript: "live_transcript",
                        duration_ms: 1.1,
                        started_at: "2024-01-15T09:30:00Z",
                    },
                ],
                task_results: { key: "value" },
            },
        };
        server.mockEndpoint().get("/conversations").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.conversations.list();
        expect(response).toEqual({
            conversation: {
                id: "id",
                workspace: "workspace",
                external_id: "external_id",
                model: "model",
                welcome_message: "welcome_message",
                input_format: "input_format",
                output_format: "output_format",
                live_transcript: "live_transcript",
                post_call_transcript: "post_call_transcript",
                duration_ms: 1.1,
                audio_url: "audio_url",
                started_at: "2024-01-15T09:30:00Z",
                ended_at: "2024-01-15T09:30:00Z",
                items: [
                    {
                        item_idx: 1,
                        role: "user",
                        live_transcript: "live_transcript",
                        duration_ms: 1.1,
                        started_at: "2024-01-15T09:30:00Z",
                    },
                ],
                task_results: {
                    key: "value",
                },
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            conversation: {
                id: "id",
                workspace: "workspace",
                external_id: "external_id",
                model: "model",
                welcome_message: "welcome_message",
                input_format: "input_format",
                output_format: "output_format",
                live_transcript: "live_transcript",
                post_call_transcript: "post_call_transcript",
                duration_ms: 1.1,
                audio_url: "audio_url",
                started_at: "2024-01-15T09:30:00Z",
                ended_at: "2024-01-15T09:30:00Z",
                items: [
                    {
                        item_idx: 1,
                        role: "user",
                        live_transcript: "live_transcript",
                        duration_ms: 1.1,
                        started_at: "2024-01-15T09:30:00Z",
                    },
                ],
                task_results: { key: "value" },
            },
        };
        server.mockEndpoint().get("/conversations/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.conversations.get("id");
        expect(response).toEqual({
            conversation: {
                id: "id",
                workspace: "workspace",
                external_id: "external_id",
                model: "model",
                welcome_message: "welcome_message",
                input_format: "input_format",
                output_format: "output_format",
                live_transcript: "live_transcript",
                post_call_transcript: "post_call_transcript",
                duration_ms: 1.1,
                audio_url: "audio_url",
                started_at: "2024-01-15T09:30:00Z",
                ended_at: "2024-01-15T09:30:00Z",
                items: [
                    {
                        item_idx: 1,
                        role: "user",
                        live_transcript: "live_transcript",
                        duration_ms: 1.1,
                        started_at: "2024-01-15T09:30:00Z",
                    },
                ],
                task_results: {
                    key: "value",
                },
            },
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/conversations/id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.cancel("id");
        expect(response).toEqual({
            success: true,
        });
    });

    test("summarize", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            summary:
                "The user called to book an appointment. The assistant helped them schedule for Monday at 9 AM under the name David Smith.",
        };
        server
            .mockEndpoint()
            .post("/conversations/id/summarize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.summarize("id");
        expect(response).toEqual({
            summary:
                "The user called to book an appointment. The assistant helped them schedule for Monday at 9 AM under the name David Smith.",
        });
    });

    test("get_analysis", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { analysis: { latencies_ms: [456, 654, 564], interruptions_count: 2 } };
        server
            .mockEndpoint()
            .get("/conversations/id/analysis")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.getAnalysis("id");
        expect(response).toEqual({
            analysis: {
                latencies_ms: [456, 654, 564],
                interruptions_count: 2,
            },
        });
    });

    test("list_extractions", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            extractions: [
                {
                    id: "id",
                    conversation_id: "conversation_id",
                    schema: { id: "id", name: "name" },
                    result: { key: "value" },
                    error: "error",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/conversations/id/extractions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.listExtractions("id");
        expect(response).toEqual({
            extractions: [
                {
                    id: "id",
                    conversation_id: "conversation_id",
                    schema: {
                        id: "id",
                        name: "name",
                    },
                    result: {
                        key: "value",
                    },
                    error: "error",
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        });
    });

    test("extract_data", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { schema_id: "conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c" };
        const rawResponseBody = {
            result: { customer_name: "John Smith", appointment_duration: 45, service_types: ["haircut", "beard trim"] },
        };
        server
            .mockEndpoint()
            .post("/conversations/id/extractions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.extractData("id", {
            schema_id: "conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c",
        });
        expect(response).toEqual({
            result: {
                customer_name: "John Smith",
                appointment_duration: 45,
                service_types: ["haircut", "beard trim"],
            },
        });
    });

    test("list_evaluations", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            evals: [
                {
                    id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
                    result: "successful",
                    prompt: { id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0", name: "chocolate_usage" },
                    created_at: "2025-07-30T23:49:18Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/conversations/id/evals")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.listEvaluations("id");
        expect(response).toEqual({
            evals: [
                {
                    id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
                    result: "successful",
                    prompt: {
                        id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
                        name: "chocolate_usage",
                    },
                    created_at: "2025-07-30T23:49:18Z",
                },
            ],
        });
    });

    test("evaluate", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { prompt_id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0" };
        const rawResponseBody = {
            id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
            result: "successful",
            prompt: { id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0", name: "chocolate_usage" },
            created_at: "2025-07-30T23:49:18Z",
        };
        server
            .mockEndpoint()
            .post("/conversations/id/evals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.evaluate("id", {
            prompt_id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
        });
        expect(response).toEqual({
            id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
            result: "successful",
            prompt: {
                id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
                name: "chocolate_usage",
            },
            created_at: "2025-07-30T23:49:18Z",
        });
    });

    test("outbound_call", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            token: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            to_phone_number: "+19189397081",
            config: {
                agent: "support-agent",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: { customer_name: "David", subject: "Chess" },
                voice_id: "sarah",
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                boosted_keywords: ["Load ID", "dispatch"],
                tools: ["keypad_input"],
            },
        };
        const rawResponseBody = { conversation_id: "conv_12cf6e88-c254-233e-a149-b2f1bdd22783" };
        server
            .mockEndpoint()
            .post("/conversations/outbound_call")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.outboundCall({
            to_phone_number: "+19189397081",
            config: {
                agent: "support-agent",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: {
                    customer_name: "David",
                    subject: "Chess",
                },
                voice_id: "sarah",
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                boosted_keywords: ["Load ID", "dispatch"],
                tools: ["keypad_input"],
            },
        });
        expect(response).toEqual({
            conversation_id: "conv_12cf6e88-c254-233e-a149-b2f1bdd22783",
        });
    });
});
