/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";

describe("Conversations", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            conversations: [
                {
                    id: "conv_12cf6e88-c254-4d3e-a149-ddf1bdd2254c",
                    agent: {
                        id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                        name: "support-agent",
                        is_deleted: false,
                    },
                    workspace: "example-workspace",
                    project: { id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad", name: "customer-support" },
                    external_id: "call-123",
                    model: "merritt",
                    welcome_message:
                        "Hello {{customer_name}}, this is the {{department}} team. How can I help you today?",
                    template_variables: { customer_name: "John", department: "Support" },
                    input_format: "mulaw_8000",
                    output_format: "mulaw_8000",
                    background_noise_level: 0.01,
                    live_transcript:
                        "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                    post_call_transcript:
                        "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                    duration_ms: 120500,
                    audio_url: "https://example.com/audio/conv_12cf6e88.wav",
                    started_at: "2025-07-30T23:45:00Z",
                    ended_at: "2025-07-30T23:47:00Z",
                    ended_by: "user",
                    items: [
                        {
                            item_idx: 0,
                            role: "user",
                            live_transcript: "Hi, I need help with booking an appointment.",
                            post_call_transcript: "Hi, I need help with booking an appointment.",
                            duration_ms: 2500,
                            started_at: "2025-07-30T23:45:00Z",
                        },
                        {
                            item_idx: 1,
                            role: "assistant",
                            live_transcript: "Of course! I'd be happy to help you book an appointment.",
                            post_call_transcript: "Of course! I'd be happy to help you book an appointment.",
                            duration_ms: 3000,
                            started_at: "2025-07-30T23:45:02Z",
                            voice_id: "grant",
                            audio_speed: 1,
                            system_prompt:
                                "You are a helpful {{department}} assistant. The customer's name is {{customer_name}}. Help them book appointments.",
                            tool_calls: [
                                {
                                    id: "tool_call_a3f8e4b2-7c91-4d63-9b2f-8e5a6c9d1f3a",
                                    tool: { id: "tool_check_availability", name: "check_availability" },
                                    endpoint_method: "POST",
                                    endpoint_url: "https://api.example.com/tools/check_availability",
                                    endpoint_headers: { Authorization: "Bearer token123" },
                                    endpoint_timeout_ms: 5000,
                                    endpoint_called_at: "2025-07-30T23:45:03Z",
                                    response_status_code: 200,
                                    request_body: { date: "tomorrow", service: "consultation" },
                                    response_body: { available: true, slots: ["09:00", "10:00", "14:00"] },
                                    timed_out: false,
                                    error_message: null,
                                },
                            ],
                        },
                    ],
                    task_results: { key: "value" },
                },
            ],
        };
        server.mockEndpoint().get("/conversations").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.conversations.list();
        expect(response).toEqual({
            conversations: [
                {
                    id: "conv_12cf6e88-c254-4d3e-a149-ddf1bdd2254c",
                    agent: {
                        id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                        name: "support-agent",
                        is_deleted: false,
                    },
                    workspace: "example-workspace",
                    project: {
                        id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                        name: "customer-support",
                    },
                    external_id: "call-123",
                    model: "merritt",
                    welcome_message:
                        "Hello {{customer_name}}, this is the {{department}} team. How can I help you today?",
                    template_variables: {
                        customer_name: "John",
                        department: "Support",
                    },
                    input_format: "mulaw_8000",
                    output_format: "mulaw_8000",
                    background_noise_level: 0.01,
                    live_transcript:
                        "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                    post_call_transcript:
                        "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                    duration_ms: 120500,
                    audio_url: "https://example.com/audio/conv_12cf6e88.wav",
                    started_at: "2025-07-30T23:45:00Z",
                    ended_at: "2025-07-30T23:47:00Z",
                    ended_by: "user",
                    items: [
                        {
                            item_idx: 0,
                            role: "user",
                            live_transcript: "Hi, I need help with booking an appointment.",
                            post_call_transcript: "Hi, I need help with booking an appointment.",
                            duration_ms: 2500,
                            started_at: "2025-07-30T23:45:00Z",
                        },
                        {
                            item_idx: 1,
                            role: "assistant",
                            live_transcript: "Of course! I'd be happy to help you book an appointment.",
                            post_call_transcript: "Of course! I'd be happy to help you book an appointment.",
                            duration_ms: 3000,
                            started_at: "2025-07-30T23:45:02Z",
                            voice_id: "grant",
                            audio_speed: 1,
                            system_prompt:
                                "You are a helpful {{department}} assistant. The customer's name is {{customer_name}}. Help them book appointments.",
                            tool_calls: [
                                {
                                    id: "tool_call_a3f8e4b2-7c91-4d63-9b2f-8e5a6c9d1f3a",
                                    tool: {
                                        id: "tool_check_availability",
                                        name: "check_availability",
                                    },
                                    endpoint_method: "POST",
                                    endpoint_url: "https://api.example.com/tools/check_availability",
                                    endpoint_headers: {
                                        Authorization: "Bearer token123",
                                    },
                                    endpoint_timeout_ms: 5000,
                                    endpoint_called_at: "2025-07-30T23:45:03Z",
                                    response_status_code: 200,
                                    request_body: {
                                        date: "tomorrow",
                                        service: "consultation",
                                    },
                                    response_body: {
                                        available: true,
                                        slots: ["09:00", "10:00", "14:00"],
                                    },
                                    timed_out: false,
                                    error_message: null,
                                },
                            ],
                        },
                    ],
                    task_results: {
                        key: "value",
                    },
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            conversation: {
                id: "conv_12cf6e88-c254-4d3e-a149-ddf1bdd2254c",
                agent: { id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783", name: "support-agent", is_deleted: false },
                workspace: "example-workspace",
                project: { id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad", name: "customer-support" },
                external_id: "call-123",
                model: "merritt",
                welcome_message: "Hello {{customer_name}}, this is the {{department}} team. How can I help you today?",
                template_variables: { customer_name: "John", department: "Support" },
                input_format: "mulaw_8000",
                output_format: "mulaw_8000",
                background_noise_level: 1.1,
                live_transcript:
                    "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                post_call_transcript:
                    "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                duration_ms: 120500,
                audio_url: "https://example.com/audio/conv_12cf6e88.wav",
                started_at: "2025-07-30T23:45:00Z",
                ended_at: "2025-07-30T23:47:00Z",
                ended_by: "user",
                items: [
                    {
                        item_idx: 0,
                        role: "user",
                        live_transcript: "Hi, I need help with booking an appointment.",
                        post_call_transcript: "Hi, I need help with booking an appointment.",
                        duration_ms: 2500,
                        started_at: "2025-07-30T23:45:00Z",
                    },
                    {
                        item_idx: 1,
                        role: "assistant",
                        live_transcript: "Of course! I'd be happy to help you book an appointment.",
                        post_call_transcript: "Of course! I'd be happy to help you book an appointment.",
                        duration_ms: 3000,
                        started_at: "2025-07-30T23:45:02Z",
                        voice_id: "grant",
                        audio_speed: 1,
                        system_prompt:
                            "You are a helpful {{department}} assistant. The customer's name is {{customer_name}}. Help them book appointments.",
                        tool_calls: [
                            {
                                id: "tool_call_f2d5c8a1-9e4b-4a7c-b3d1-6f8e2a9c5b7d",
                                tool: { id: "tool_check_availability", name: "check_availability" },
                                endpoint_method: "POST",
                                endpoint_url: "https://api.example.com/tools/check_availability",
                                endpoint_headers: { Authorization: "Bearer token123" },
                                endpoint_timeout_ms: 5000,
                                endpoint_called_at: "2025-07-30T23:45:03Z",
                                response_status_code: 200,
                                request_body: { date: "tomorrow", service: "consultation" },
                                response_body: { available: true, slots: ["09:00", "10:00", "14:00"] },
                                timed_out: false,
                                error_message: null,
                            },
                        ],
                    },
                ],
                task_results: { key: "value" },
            },
        };
        server.mockEndpoint().get("/conversations/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.conversations.get("id");
        expect(response).toEqual({
            conversation: {
                id: "conv_12cf6e88-c254-4d3e-a149-ddf1bdd2254c",
                agent: {
                    id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
                    name: "support-agent",
                    is_deleted: false,
                },
                workspace: "example-workspace",
                project: {
                    id: "proj_ad0334f1-2487-4155-9df3-abd8129b29ad",
                    name: "customer-support",
                },
                external_id: "call-123",
                model: "merritt",
                welcome_message: "Hello {{customer_name}}, this is the {{department}} team. How can I help you today?",
                template_variables: {
                    customer_name: "John",
                    department: "Support",
                },
                input_format: "mulaw_8000",
                output_format: "mulaw_8000",
                background_noise_level: 1.1,
                live_transcript:
                    "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                post_call_transcript:
                    "User: Hi, I need help with booking an appointment.\nAssistant: Of course! I'd be happy to help you book an appointment.",
                duration_ms: 120500,
                audio_url: "https://example.com/audio/conv_12cf6e88.wav",
                started_at: "2025-07-30T23:45:00Z",
                ended_at: "2025-07-30T23:47:00Z",
                ended_by: "user",
                items: [
                    {
                        item_idx: 0,
                        role: "user",
                        live_transcript: "Hi, I need help with booking an appointment.",
                        post_call_transcript: "Hi, I need help with booking an appointment.",
                        duration_ms: 2500,
                        started_at: "2025-07-30T23:45:00Z",
                    },
                    {
                        item_idx: 1,
                        role: "assistant",
                        live_transcript: "Of course! I'd be happy to help you book an appointment.",
                        post_call_transcript: "Of course! I'd be happy to help you book an appointment.",
                        duration_ms: 3000,
                        started_at: "2025-07-30T23:45:02Z",
                        voice_id: "grant",
                        audio_speed: 1,
                        system_prompt:
                            "You are a helpful {{department}} assistant. The customer's name is {{customer_name}}. Help them book appointments.",
                        tool_calls: [
                            {
                                id: "tool_call_f2d5c8a1-9e4b-4a7c-b3d1-6f8e2a9c5b7d",
                                tool: {
                                    id: "tool_check_availability",
                                    name: "check_availability",
                                },
                                endpoint_method: "POST",
                                endpoint_url: "https://api.example.com/tools/check_availability",
                                endpoint_headers: {
                                    Authorization: "Bearer token123",
                                },
                                endpoint_timeout_ms: 5000,
                                endpoint_called_at: "2025-07-30T23:45:03Z",
                                response_status_code: 200,
                                request_body: {
                                    date: "tomorrow",
                                    service: "consultation",
                                },
                                response_body: {
                                    available: true,
                                    slots: ["09:00", "10:00", "14:00"],
                                },
                                timed_out: false,
                                error_message: null,
                            },
                        ],
                    },
                ],
                task_results: {
                    key: "value",
                },
            },
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/conversations/id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.cancel("id");
        expect(response).toEqual({
            success: true,
        });
    });

    test("get_analysis", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { analysis: { latencies_ms: [456, 654, 564], interruptions_count: 2 } };
        server
            .mockEndpoint()
            .get("/conversations/id/analysis")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.getAnalysis("id");
        expect(response).toEqual({
            analysis: {
                latencies_ms: [456, 654, 564],
                interruptions_count: 2,
            },
        });
    });

    test("list_extractions", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            extractions: [
                {
                    id: "conv_extract_f825-4d3e-a149-ddf1bdd2254c",
                    conversation_id: "conversation_id",
                    schema: {
                        id: "conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c",
                        name: "appointment-details",
                    },
                    result: {
                        customer_name: "John Smith",
                        appointment_date: "2025-04-17",
                        appointment_time: "2:30 PM",
                    },
                    error: "error",
                    created_at: "2025-07-30T23:49:18Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/conversations/id/extractions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.listExtractions("id");
        expect(response).toEqual({
            extractions: [
                {
                    id: "conv_extract_f825-4d3e-a149-ddf1bdd2254c",
                    conversation_id: "conversation_id",
                    schema: {
                        id: "conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c",
                        name: "appointment-details",
                    },
                    result: {
                        customer_name: "John Smith",
                        appointment_date: "2025-04-17",
                        appointment_time: "2:30 PM",
                    },
                    error: "error",
                    created_at: "2025-07-30T23:49:18Z",
                },
            ],
        });
    });

    test("extract_data", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { schema_id: "conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c" };
        const rawResponseBody = {
            result: { customer_name: "John Smith", appointment_duration: 45, service_types: ["haircut", "beard trim"] },
        };
        server
            .mockEndpoint()
            .post("/conversations/id/extractions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.extractData("id", {
            schema_id: "conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c",
        });
        expect(response).toEqual({
            result: {
                customer_name: "John Smith",
                appointment_duration: 45,
                service_types: ["haircut", "beard trim"],
            },
        });
    });

    test("list_evaluations", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            evals: [
                {
                    id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
                    result: "successful",
                    prompt: { id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0", name: "chocolate_usage" },
                    created_at: "2025-07-30T23:49:18Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/conversations/id/evals")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.listEvaluations("id");
        expect(response).toEqual({
            evals: [
                {
                    id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
                    result: "successful",
                    prompt: {
                        id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
                        name: "chocolate_usage",
                    },
                    created_at: "2025-07-30T23:49:18Z",
                },
            ],
        });
    });

    test("evaluate", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { prompt_id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0" };
        const rawResponseBody = {
            id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
            result: "successful",
            prompt: { id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0", name: "chocolate_usage" },
            created_at: "2025-07-30T23:49:18Z",
        };
        server
            .mockEndpoint()
            .post("/conversations/id/evals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.evaluate("id", {
            prompt_id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
        });
        expect(response).toEqual({
            id: "conv_eval_12345678-abcd-efgh-ijkl-mnopqrstuvwx",
            result: "successful",
            prompt: {
                id: "conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
                name: "chocolate_usage",
            },
            created_at: "2025-07-30T23:49:18Z",
        });
    });

    test("outbound_call", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            to_phone_number: "+19189397081",
            config: {
                agent: "support-agent",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: { customer_name: "David", subject: "Chess" },
                voice_id: "grant",
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                recognized_languages: ["en", "es"],
                boosted_keywords: ["Load ID", "dispatch"],
                tools: ["keypad_input"],
            },
        };
        const rawResponseBody = { conversation_id: "conv_12cf6e88-c254-233e-a149-b2f1bdd22783" };
        server
            .mockEndpoint()
            .post("/conversations/outbound_call")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.outboundCall({
            to_phone_number: "+19189397081",
            config: {
                agent: "support-agent",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: {
                    customer_name: "David",
                    subject: "Chess",
                },
                voice_id: "grant",
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                no_input_end_conversation_sec: 180,
                recognized_languages: ["en", "es"],
                boosted_keywords: ["Load ID", "dispatch"],
                tools: ["keypad_input"],
            },
        });
        expect(response).toEqual({
            conversation_id: "conv_12cf6e88-c254-233e-a149-b2f1bdd22783",
        });
    });

    test("sip_outbound_call", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { from_phone_number: "from_phone_number", to_phone_number: "to_phone_number" };
        const rawResponseBody = { conversation_id: "conversation_id" };
        server
            .mockEndpoint()
            .post("/conversations/sip/outbound_call")
            .header("X-Sip-Address", "X-Sip-Address")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.sipOutboundCall({
            "X-Sip-Address": "X-Sip-Address",
            from_phone_number: "from_phone_number",
            to_phone_number: "to_phone_number",
        });
        expect(response).toEqual({
            conversation_id: "conversation_id",
        });
    });
});
