/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";

describe("Voices", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { voices: [{ id: "grant", name: "Grant", description: "description" }] };
        server.mockEndpoint().get("/voices").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.voices.list({
            model: "merritt",
        });
        expect(response).toEqual({
            voices: [
                {
                    id: "grant",
                    name: "Grant",
                    description: "description",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { voice: { id: "grant", name: "Grant", description: "description" } };
        server.mockEndpoint().get("/voices/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.voices.get("id");
        expect(response).toEqual({
            voice: {
                id: "grant",
                name: "Grant",
                description: "description",
            },
        });
    });
});
