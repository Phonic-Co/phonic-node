/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PhonicClient } from "../../src/Client";
import * as Phonic from "../../src/api/index";

describe("ExtractionSchemas", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            extraction_schemas: [
                {
                    id: "conv_extract_schema_c818e617-59f9-4f43-936e-ca8a794f9ccf",
                    name: "Appointment details",
                    prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
                    fields: [
                        { name: "Date", type: "string", description: "The date of the appointment" },
                        {
                            name: "Copay",
                            type: "string",
                            description: "Amount of money the patient pays for the appointment",
                        },
                        {
                            name: "Confirmed as booked",
                            type: "bool",
                            description: "Is the appointment confirmed as booked?",
                        },
                    ],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/extraction_schemas")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.extractionSchemas.list({
            project: "main",
        });
        expect(response).toEqual({
            extraction_schemas: [
                {
                    id: "conv_extract_schema_c818e617-59f9-4f43-936e-ca8a794f9ccf",
                    name: "Appointment details",
                    prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
                    fields: [
                        {
                            name: "Date",
                            type: "string",
                            description: "The date of the appointment",
                        },
                        {
                            name: "Copay",
                            type: "string",
                            description: "Amount of money the patient pays for the appointment",
                        },
                        {
                            name: "Confirmed as booked",
                            type: "bool",
                            description: "Is the appointment confirmed as booked?",
                        },
                    ],
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/extraction_schemas")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.list();
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "Appointment details",
            prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
            fields: [
                { name: "Date", type: "string", description: "The date of the appointment" },
                { name: "Copay", type: "string", description: "Amount of money the patient pays for the appointment" },
                { name: "Confirmed as booked", type: "bool", description: "Is the appointment confirmed as booked?" },
            ],
        };
        const rawResponseBody = {
            id: "conv_extract_schema_c818e617-59f9-4f43-936e-ca8a794f9ccf",
            name: "Appointment details",
        };
        server
            .mockEndpoint()
            .post("/extraction_schemas")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.extractionSchemas.create({
            project: "main",
            name: "Appointment details",
            prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
            fields: [
                {
                    name: "Date",
                    type: "string",
                    description: "The date of the appointment",
                },
                {
                    name: "Copay",
                    type: "string",
                    description: "Amount of money the patient pays for the appointment",
                },
                {
                    name: "Confirmed as booked",
                    type: "bool",
                    description: "Is the appointment confirmed as booked?",
                },
            ],
        });
        expect(response).toEqual({
            id: "conv_extract_schema_c818e617-59f9-4f43-936e-ca8a794f9ccf",
            name: "Appointment details",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            prompt: "prompt",
            fields: [
                { name: "name", type: "string", description: undefined },
                { name: "name", type: "string", description: undefined },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/extraction_schemas")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.create({
                name: "name",
                prompt: "prompt",
                fields: [
                    {
                        name: "name",
                        type: "string",
                        description: undefined,
                    },
                    {
                        name: "name",
                        type: "string",
                        description: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            prompt: "prompt",
            fields: [
                { name: "name", type: "string", description: undefined },
                { name: "name", type: "string", description: undefined },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/extraction_schemas")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.create({
                name: "name",
                prompt: "prompt",
                fields: [
                    {
                        name: "name",
                        type: "string",
                        description: undefined,
                    },
                    {
                        name: "name",
                        type: "string",
                        description: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "name",
            prompt: "prompt",
            fields: [
                { name: "name", type: "string", description: undefined },
                { name: "name", type: "string", description: undefined },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/extraction_schemas")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.create({
                name: "name",
                prompt: "prompt",
                fields: [
                    {
                        name: "name",
                        type: "string",
                        description: undefined,
                    },
                    {
                        name: "name",
                        type: "string",
                        description: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Phonic.ConflictError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = {
            extraction_schema: {
                id: "conv_extract_schema_c818e617-59f9-4f43-936e-ca8a794f9ccf",
                name: "Appointment details",
                prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
                fields: [
                    { name: "Date", type: "string", description: "The date of the appointment" },
                    {
                        name: "Copay",
                        type: "string",
                        description: "Amount of money the patient pays for the appointment",
                    },
                    {
                        name: "Confirmed as booked",
                        type: "bool",
                        description: "Is the appointment confirmed as booked?",
                    },
                ],
            },
        };
        server
            .mockEndpoint()
            .get("/extraction_schemas/nameOrId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.extractionSchemas.get("nameOrId", {
            project: "main",
        });
        expect(response).toEqual({
            extraction_schema: {
                id: "conv_extract_schema_c818e617-59f9-4f43-936e-ca8a794f9ccf",
                name: "Appointment details",
                prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
                fields: [
                    {
                        name: "Date",
                        type: "string",
                        description: "The date of the appointment",
                    },
                    {
                        name: "Copay",
                        type: "string",
                        description: "Amount of money the patient pays for the appointment",
                    },
                    {
                        name: "Confirmed as booked",
                        type: "bool",
                        description: "Is the appointment confirmed as booked?",
                    },
                ],
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/extraction_schemas/nameOrId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.get("nameOrId");
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .delete("/extraction_schemas/nameOrId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.extractionSchemas.delete("nameOrId", {
            project: "main",
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/extraction_schemas/nameOrId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.delete("nameOrId");
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = {
            name: "Updated appointment details",
            prompt: "Updated extraction instructions. Dates should be in `9 Apr 2025` format.",
            fields: [
                { name: "Date", type: "string", description: "The date of the appointment" },
                { name: "Time", type: "string", description: "The time of the appointment" },
            ],
        };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .patch("/extraction_schemas/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.extractionSchemas.update("nameOrId", {
            project: "main",
            name: "Updated appointment details",
            prompt: "Updated extraction instructions. Dates should be in `9 Apr 2025` format.",
            fields: [
                {
                    name: "Date",
                    type: "string",
                    description: "The date of the appointment",
                },
                {
                    name: "Time",
                    type: "string",
                    description: "The time of the appointment",
                },
            ],
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, prompt: undefined, fields: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/extraction_schemas/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.update("nameOrId", {
                name: undefined,
                prompt: undefined,
                fields: undefined,
            });
        }).rejects.toThrow(Phonic.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, prompt: undefined, fields: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/extraction_schemas/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.update("nameOrId", {
                name: undefined,
                prompt: undefined,
                fields: undefined,
            });
        }).rejects.toThrow(Phonic.NotFoundError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PhonicClient({
            apiKey: "test",
            environment: { base: server.baseUrl, production: server.baseUrl },
        });
        const rawRequestBody = { name: undefined, prompt: undefined, fields: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/extraction_schemas/nameOrId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.extractionSchemas.update("nameOrId", {
                name: undefined,
                prompt: undefined,
                fields: undefined,
            });
        }).rejects.toThrow(Phonic.ConflictError);
    });
});
