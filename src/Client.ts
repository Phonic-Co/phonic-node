/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "./core/headers.js";
import * as Phonic from "./api/index.js";
import * as errors from "./errors/index.js";

export declare namespace PhonicClient {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class PhonicClient {
    protected readonly _options: PhonicClient.Options;

    constructor(_options: PhonicClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "",
                    "X-Fern-SDK-Version": "0.0.6",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    /**
     * Returns all projects in a workspace.
     *
     * @param {PhonicClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.list()
     */
    public list(requestOptions?: PhonicClient.RequestOptions): core.HttpResponsePromise<Phonic.ListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: PhonicClient.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ListResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "projects",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling GET /projects.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new project in a workspace.
     *
     * @param {Phonic.CreateProjectRequest} request
     * @param {PhonicClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.create({
     *         name: "customer-support"
     *     })
     */
    public create(
        request: Phonic.CreateProjectRequest,
        requestOptions?: PhonicClient.RequestOptions,
    ): core.HttpResponsePromise<Phonic.CreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.CreateProjectRequest,
        requestOptions?: PhonicClient.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.CreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "projects",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.CreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling POST /projects.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Upserts an agent by name. If an agent with the same name already exists, it will be updated. Otherwise, it will be created.
     *
     * @param {Phonic.UpsertAgentRequest} request
     * @param {PhonicClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.upsert({
     *         name: "support-agent",
     *         phone_number: "assign-automatically",
     *         timezone: "America/Los_Angeles",
     *         voice_id: "sarah",
     *         welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *         system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *         template_variables: {
     *             "customer_name": {},
     *             "subject": {
     *                 default_value: "Chess"
     *             }
     *         },
     *         tools: ["keypad_input"],
     *         no_input_poke_sec: 30,
     *         no_input_poke_text: "Are you still there?",
     *         boosted_keywords: ["Load ID", "dispatch"],
     *         configuration_endpoint: {
     *             url: "https://api.example.com/config",
     *             headers: {
     *                 "Authorization": "Bearer token123"
     *             },
     *             timeout_ms: 7000
     *         }
     *     })
     */
    public upsert(
        request: Phonic.UpsertAgentRequest = {},
        requestOptions?: PhonicClient.RequestOptions,
    ): core.HttpResponsePromise<Phonic.UpsertResponse> {
        return core.HttpResponsePromise.fromPromise(this.__upsert(request, requestOptions));
    }

    private async __upsert(
        request: Phonic.UpsertAgentRequest = {},
        requestOptions?: PhonicClient.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.UpsertResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "agents/upsert",
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.UpsertResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling PUT /agents/upsert.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a project by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the project to get.
     * @param {PhonicClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.get("nameOrId")
     */
    public get(
        nameOrId: string,
        requestOptions?: PhonicClient.RequestOptions,
    ): core.HttpResponsePromise<Phonic.GetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, requestOptions));
    }

    private async __get(
        nameOrId: string,
        requestOptions?: PhonicClient.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.GetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.GetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling GET /projects/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a project by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the project to delete.
     * @param {PhonicClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.delete("nameOrId")
     */
    public delete(
        nameOrId: string,
        requestOptions?: PhonicClient.RequestOptions,
    ): core.HttpResponsePromise<Phonic.DeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        requestOptions?: PhonicClient.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.DeleteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.DeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling DELETE /projects/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a project by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the project to update.
     * @param {Phonic.UpdateProjectRequest} request
     * @param {PhonicClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.update("nameOrId", {
     *         name: "updated-customer-support",
     *         default_agent: "another-agent"
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateProjectRequest = {},
        requestOptions?: PhonicClient.RequestOptions,
    ): core.HttpResponsePromise<Phonic.UpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateProjectRequest = {},
        requestOptions?: PhonicClient.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.UpdateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.UpdateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling PATCH /projects/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Initiates a call to a given phone number.
     *
     * @param {Phonic.OutboundCallRequest} request
     * @param {PhonicClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.outboundCall({
     *         to_phone_number: "+19189397081",
     *         config: {
     *             agent: "support-agent",
     *             welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *             system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *             template_variables: {
     *                 "customer_name": "David",
     *                 "subject": "Chess"
     *             },
     *             voice_id: "sarah",
     *             no_input_poke_sec: 30,
     *             no_input_poke_text: "Are you still there?",
     *             no_input_end_conversation_sec: 180,
     *             boosted_keywords: ["Load ID", "dispatch"],
     *             tools: ["keypad_input"]
     *         }
     *     })
     */
    public outboundCall(
        request: Phonic.OutboundCallRequest,
        requestOptions?: PhonicClient.RequestOptions,
    ): core.HttpResponsePromise<Phonic.OutboundCallResponse> {
        return core.HttpResponsePromise.fromPromise(this.__outboundCall(request, requestOptions));
    }

    private async __outboundCall(
        request: Phonic.OutboundCallRequest,
        requestOptions?: PhonicClient.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.OutboundCallResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "conversations/outbound_call",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.OutboundCallResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling POST /conversations/outbound_call.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
