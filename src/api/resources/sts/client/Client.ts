/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import { StsSocket } from "./Socket.js";

export declare namespace Sts {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface ConnectArgs {
        downstream_websocket_url: string;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, string>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Sts {
    protected readonly _options: Sts.Options;

    constructor(_options: Sts.Options) {
        this._options = _options;
    }

    public async connect(args: Sts.ConnectArgs): Promise<StsSocket> {
        const { downstream_websocket_url, headers, debug, reconnectAttempts } = args;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["downstream_websocket_url"] = downstream_websocket_url;
        let _headers: Record<string, string> = {
            ...headers,
        };
        const socket = new core.ReconnectingWebSocket({
            url: core.url.join(
                (await core.Supplier.get(this._options["baseUrl"])) ??
                    ((await core.Supplier.get(this._options["environment"])) ?? environments.PhonicEnvironment.Default)
                        .production,
                "/v1/sts/ws",
            ),
            protocols: [],
            queryParameters: _queryParams,
            headers: _headers,
            options: { debug: debug ?? false, maxRetries: reconnectAttempts ?? 30 },
        });
        return new StsSocket({ socket });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
