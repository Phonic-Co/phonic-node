/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Phonic from "../../../../index.js";

/**
 * @example
 *     {
 *         project: "main",
 *         name: "book_appointment",
 *         description: "Books an appointment in the calendar system",
 *         type: "custom_webhook",
 *         execution_mode: "sync",
 *         parameters: [{
 *                 type: "string",
 *                 name: "date",
 *                 description: "The date for the appointment in YYYY-MM-DD format",
 *                 is_required: true,
 *                 location: "request_body"
 *             }, {
 *                 type: "string",
 *                 name: "time",
 *                 description: "The time for the appointment in HH:MM format",
 *                 is_required: true,
 *                 location: "request_body"
 *             }],
 *         endpoint_method: "POST",
 *         endpoint_url: "https://api.example.com/book-appointment",
 *         endpoint_headers: {
 *             "Authorization": "Bearer token123",
 *             "Content-Type": "application/json"
 *         },
 *         endpoint_timeout_ms: 5000
 *     }
 *
 * @example
 *     {
 *         project: "main",
 *         name: "check_inventory",
 *         description: "Checks product inventory levels",
 *         type: "custom_websocket",
 *         execution_mode: "async",
 *         parameters: [{
 *                 type: "string",
 *                 name: "product_id",
 *                 description: "The product ID to check",
 *                 is_required: true
 *             }],
 *         tool_call_output_timeout_ms: 5000
 *     }
 *
 * @example
 *     {
 *         project: "main",
 *         name: "transfer_to_support",
 *         description: "Transfers the caller to the support team",
 *         type: "built_in_transfer_to_phone_number",
 *         execution_mode: "sync",
 *         phone_number: "+15551234567"
 *     }
 */
export interface CreateToolRequest {
    /** The name of the project to create the tool in. */
    project?: string;
    /** The name of the tool. Must be snake_case and unique within the organization. */
    name: string;
    /** A description of what the tool does. */
    description: string;
    /** The type of tool. */
    type: CreateToolRequest.Type;
    /** Mode of operation. */
    execution_mode: CreateToolRequest.ExecutionMode;
    /**
     * Array of parameter definitions.
     * For `custom_webhook` tools with POST method, each parameter must include a `location` field.
     * For `custom_webhook` tools with GET method, `location` defaults to `"query_string"` if not specified.
     * For `custom_websocket` and `built_in_transfer_to_phone_number` tools, `location` must not be specified.
     */
    parameters?: Phonic.ToolParameter[];
    /** Required for webhook tools. HTTP method for the webhook endpoint. */
    endpoint_method?: CreateToolRequest.EndpointMethod;
    /** Required for webhook tools. */
    endpoint_url?: string;
    /** Optional headers for webhook tools. */
    endpoint_headers?: Record<string, string>;
    /** Timeout for webhook tools. */
    endpoint_timeout_ms?: number;
    /** Timeout for WebSocket tool responses. */
    tool_call_output_timeout_ms?: number;
    /** The E.164 formatted phone number to transfer calls to. Required for built_in_transfer_to_phone_number tools. */
    phone_number?: string;
}

export namespace CreateToolRequest {
    /**
     * The type of tool.
     */
    export type Type = "custom_webhook" | "custom_websocket" | "built_in_transfer_to_phone_number";
    export const Type = {
        CustomWebhook: "custom_webhook",
        CustomWebsocket: "custom_websocket",
        BuiltInTransferToPhoneNumber: "built_in_transfer_to_phone_number",
    } as const;
    /**
     * Mode of operation.
     */
    export type ExecutionMode = "sync" | "async";
    export const ExecutionMode = {
        Sync: "sync",
        Async: "async",
    } as const;
    /**
     * Required for webhook tools. HTTP method for the webhook endpoint.
     */
    export type EndpointMethod = "GET" | "POST";
    export const EndpointMethod = {
        Get: "GET",
        Post: "POST",
    } as const;
}
