/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Phonic from "../../../index.js";
import * as core from "../../../../core/index.js";

export type Error =
    | Phonic.tools.create.Error.BadRequestError
    | Phonic.tools.create.Error.ForbiddenError
    | Phonic.tools.create.Error.ConflictError
    | Phonic.tools.create.Error._Unknown;

export namespace Error {
    export interface BadRequestError {
        statusCode: 400;
        content: Phonic.Error_;
    }

    export interface ForbiddenError {
        statusCode: 403;
        content: Phonic.Error_;
    }

    export interface ConflictError {
        statusCode: 409;
        content: Phonic.Error_;
    }

    export interface _Unknown {
        statusCode: void;
        content: core.Fetcher.Error;
    }

    export interface _Visitor<_Result> {
        badRequestError: (value: Phonic.Error_) => _Result;
        forbiddenError: (value: Phonic.Error_) => _Result;
        conflictError: (value: Phonic.Error_) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    badRequestError: (value: Phonic.Error_): Phonic.tools.create.Error.BadRequestError => {
        return {
            content: value,
            statusCode: 400,
        };
    },

    forbiddenError: (value: Phonic.Error_): Phonic.tools.create.Error.ForbiddenError => {
        return {
            content: value,
            statusCode: 403,
        };
    },

    conflictError: (value: Phonic.Error_): Phonic.tools.create.Error.ConflictError => {
        return {
            content: value,
            statusCode: 409,
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): Phonic.tools.create.Error._Unknown => {
        return {
            statusCode: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: Phonic.tools.create.Error,
        visitor: Phonic.tools.create.Error._Visitor<_Result>,
    ): _Result => {
        switch (value.statusCode) {
            case 400:
                return visitor.badRequestError(value.content);
            case 403:
                return visitor.forbiddenError(value.content);
            case 409:
                return visitor.conflictError(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
