/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tools {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Tools {
    protected readonly _options: Tools.Options;

    constructor(_options: Tools.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns all custom tools for the organization.
     *
     * @param {Phonic.ToolsListRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.tools.list({
     *         project: "main"
     *     })
     */
    public list(
        request: Phonic.ToolsListRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ToolsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Phonic.ToolsListRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ToolsListResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "tools",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ToolsListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling GET /tools.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new tool in a project.
     *
     * @param {Phonic.CreateToolRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.BadRequestError}
     * @throws {@link Phonic.ForbiddenError}
     * @throws {@link Phonic.ConflictError}
     *
     * @example
     *     await client.tools.create({
     *         project: "main",
     *         name: "book_appointment",
     *         description: "Books an appointment in the calendar system",
     *         type: "custom_webhook",
     *         execution_mode: "sync",
     *         parameters: [{
     *                 type: "string",
     *                 name: "date",
     *                 description: "The date for the appointment in YYYY-MM-DD format",
     *                 is_required: true,
     *                 location: "request_body"
     *             }, {
     *                 type: "string",
     *                 name: "time",
     *                 description: "The time for the appointment in HH:MM format",
     *                 is_required: true,
     *                 location: "request_body"
     *             }],
     *         endpoint_method: "POST",
     *         endpoint_url: "https://api.example.com/book-appointment",
     *         endpoint_headers: {
     *             "Authorization": "Bearer token123",
     *             "Content-Type": "application/json"
     *         },
     *         endpoint_timeout_ms: 5000
     *     })
     *
     * @example
     *     await client.tools.create({
     *         project: "main",
     *         name: "check_inventory",
     *         description: "Checks product inventory levels",
     *         type: "custom_websocket",
     *         execution_mode: "async",
     *         parameters: [{
     *                 type: "string",
     *                 name: "product_id",
     *                 description: "The product ID to check",
     *                 is_required: true
     *             }],
     *         tool_call_output_timeout_ms: 5000
     *     })
     *
     * @example
     *     await client.tools.create({
     *         project: "main",
     *         name: "transfer_to_support",
     *         description: "Transfers the caller to the support team",
     *         type: "built_in_transfer_to_phone_number",
     *         execution_mode: "sync",
     *         phone_number: "+15551234567"
     *     })
     */
    public create(
        request: Phonic.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ToolsCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ToolsCreateResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "tools",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ToolsCreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Phonic.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Phonic.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Phonic.ConflictError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling POST /tools.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a tool by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the tool to get.
     * @param {Phonic.ToolsGetRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.ForbiddenError}
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.tools.get("nameOrId", {
     *         project: "main"
     *     })
     */
    public get(
        nameOrId: string,
        request: Phonic.ToolsGetRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ToolsGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, request, requestOptions));
    }

    private async __get(
        nameOrId: string,
        request: Phonic.ToolsGetRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ToolsGetResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `tools/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ToolsGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Phonic.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling GET /tools/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a tool by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the tool to delete.
     * @param {Phonic.ToolsDeleteRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.tools.delete("nameOrId", {
     *         project: "main"
     *     })
     */
    public delete(
        nameOrId: string,
        request: Phonic.ToolsDeleteRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ToolsDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, request, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        request: Phonic.ToolsDeleteRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ToolsDeleteResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `tools/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ToolsDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling DELETE /tools/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a tool by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the tool to update.
     * @param {Phonic.UpdateToolRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.BadRequestError}
     * @throws {@link Phonic.NotFoundError}
     * @throws {@link Phonic.ConflictError}
     *
     * @example
     *     await client.tools.update("nameOrId", {
     *         project: "main",
     *         description: "Updated description for booking appointments with enhanced features",
     *         endpoint_headers: {
     *             "Authorization": "Bearer updated_token456"
     *         },
     *         endpoint_timeout_ms: 7000
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateToolRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ToolsUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateToolRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ToolsUpdateResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `tools/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ToolsUpdateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Phonic.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Phonic.ConflictError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling PATCH /tools/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["PHONIC_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
