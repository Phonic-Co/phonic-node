/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";

export declare namespace Tools {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Tools {
    protected readonly _options: Tools.Options;

    constructor(_options: Tools.Options) {
        this._options = _options;
    }

    /**
     * Returns all custom tools for the organization.
     *
     * @param {Phonic.ToolsListRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.list()
     */
    public list(
        request: Phonic.ToolsListRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ToolsListResponse, Phonic.tools.list.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Phonic.ToolsListRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ToolsListResponse, Phonic.tools.list.Error>>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "tools",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ToolsListResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.list.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.tools.list.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Creates a new tool in a project.
     *
     * @param {Phonic.CreateToolRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.create({
     *         name: "book_appointment",
     *         description: "Books an appointment in the calendar system",
     *         type: "custom_webhook",
     *         execution_mode: "sync",
     *         parameters: [{
     *                 type: "string",
     *                 name: "date",
     *                 description: "The date for the appointment in YYYY-MM-DD format",
     *                 is_required: true
     *             }, {
     *                 type: "string",
     *                 name: "time",
     *                 description: "The time for the appointment in HH:MM format",
     *                 is_required: true
     *             }],
     *         endpoint_method: "POST",
     *         endpoint_url: "https://api.example.com/book-appointment",
     *         endpoint_headers: {
     *             "Authorization": "Bearer token123",
     *             "Content-Type": "application/json"
     *         },
     *         endpoint_timeout_ms: 5000
     *     })
     *
     * @example
     *     await client.tools.create({
     *         name: "check_inventory",
     *         description: "Checks product inventory levels",
     *         type: "custom_websocket",
     *         execution_mode: "async",
     *         parameters: [{
     *                 type: "string",
     *                 name: "product_id",
     *                 description: "The product ID to check",
     *                 is_required: true
     *             }],
     *         tool_call_output_timeout_ms: 5000
     *     })
     */
    public create(
        request: Phonic.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ToolsCreateResponse, Phonic.tools.create.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ToolsCreateResponse, Phonic.tools.create.Error>>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "tools",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ToolsCreateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.create.Error.badRequestError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 403:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.create.Error.forbiddenError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 409:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.create.Error.conflictError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.tools.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns a tool by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the tool to get.
     * @param {Phonic.ToolsGetRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.get("nameOrId")
     */
    public get(
        nameOrId: string,
        request: Phonic.ToolsGetRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ToolsGetResponse, Phonic.tools.get.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, request, requestOptions));
    }

    private async __get(
        nameOrId: string,
        request: Phonic.ToolsGetRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ToolsGetResponse, Phonic.tools.get.Error>>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `tools/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ToolsGetResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.get.Error.forbiddenError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.get.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.tools.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Deletes a tool by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the tool to delete.
     * @param {Phonic.ToolsDeleteRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.delete("nameOrId")
     */
    public delete(
        nameOrId: string,
        request: Phonic.ToolsDeleteRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ToolsDeleteResponse, Phonic.tools.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, request, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        request: Phonic.ToolsDeleteRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ToolsDeleteResponse, Phonic.tools.delete.Error>>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `tools/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ToolsDeleteResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.delete.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.tools.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Updates a tool by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the tool to update.
     * @param {Phonic.UpdateToolRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.update("nameOrId", {
     *         description: "Updated description for booking appointments with enhanced features",
     *         endpoint_headers: {
     *             "Authorization": "Bearer updated_token456"
     *         },
     *         endpoint_timeout_ms: 7000
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateToolRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ToolsUpdateResponse, Phonic.tools.update.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateToolRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ToolsUpdateResponse, Phonic.tools.update.Error>>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `tools/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ToolsUpdateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.update.Error.badRequestError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.update.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 409:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.tools.update.Error.conflictError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.tools.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
