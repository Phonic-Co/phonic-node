/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Phonic from "../../../index.js";
import * as core from "../../../../core/index.js";

export type Error =
    | Phonic.agents.delete.Error.ForbiddenError
    | Phonic.agents.delete.Error.NotFoundError
    | Phonic.agents.delete.Error._Unknown;

export namespace Error {
    export interface ForbiddenError {
        statusCode: 403;
        content: Phonic.Error_;
    }

    export interface NotFoundError {
        statusCode: 404;
        content: Phonic.Error_;
    }

    export interface _Unknown {
        statusCode: void;
        content: core.Fetcher.Error;
    }

    export interface _Visitor<_Result> {
        forbiddenError: (value: Phonic.Error_) => _Result;
        notFoundError: (value: Phonic.Error_) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    forbiddenError: (value: Phonic.Error_): Phonic.agents.delete.Error.ForbiddenError => {
        return {
            content: value,
            statusCode: 403,
        };
    },

    notFoundError: (value: Phonic.Error_): Phonic.agents.delete.Error.NotFoundError => {
        return {
            content: value,
            statusCode: 404,
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): Phonic.agents.delete.Error._Unknown => {
        return {
            statusCode: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: Phonic.agents.delete.Error,
        visitor: Phonic.agents.delete.Error._Visitor<_Result>,
    ): _Result => {
        switch (value.statusCode) {
            case 403:
                return visitor.forbiddenError(value.content);
            case 404:
                return visitor.notFoundError(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
