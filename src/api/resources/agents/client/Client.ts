/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Agents {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Agents {
    protected readonly _options: Agents.Options;

    constructor(_options: Agents.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns all agents in a project.
     *
     * @param {Phonic.AgentsListRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.NotFoundError}
     * @throws {@link Phonic.InternalServerError}
     *
     * @example
     *     await client.agents.list()
     */
    public list(
        request: Phonic.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Phonic.AgentsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Phonic.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.AgentsListResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "agents",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.AgentsListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Phonic.InternalServerError(
                        _response.error.body as Phonic.BasicError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling GET /agents.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new agent in a project.
     *
     * @param {Phonic.AgentsCreateRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.BadRequestError}
     * @throws {@link Phonic.UnauthorizedError}
     * @throws {@link Phonic.NotFoundError}
     * @throws {@link Phonic.InternalServerError}
     *
     * @example
     *     await client.agents.create({
     *         project: "main",
     *         name: "support-agent",
     *         phone_number: "assign-automatically",
     *         timezone: "America/Los_Angeles",
     *         voice_id: "grant",
     *         audio_speed: 1,
     *         background_noise_level: 0,
     *         welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *         system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *         template_variables: {
     *             "customer_name": {},
     *             "subject": {
     *                 default_value: "Chess"
     *             }
     *         },
     *         tools: ["keypad_input"],
     *         no_input_poke_sec: 30,
     *         no_input_poke_text: "Are you still there?",
     *         recognized_languages: ["en", "es"],
     *         boosted_keywords: ["Load ID", "dispatch"],
     *         configuration_endpoint: {
     *             url: "https://api.example.com/config",
     *             headers: {
     *                 "Authorization": "Bearer token123"
     *             },
     *             timeout_ms: 7000
     *         }
     *     })
     */
    public create(
        request: Phonic.AgentsCreateRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Phonic.AgentsCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.AgentsCreateRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.AgentsCreateResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "agents",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.AgentsCreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Phonic.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Phonic.UnauthorizedError(
                        _response.error.body as Phonic.BasicError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Phonic.InternalServerError(
                        _response.error.body as Phonic.BasicError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling POST /agents.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Upserts an agent by name. If an agent with the same name already exists, it will be updated. Otherwise, it will be created.
     *
     * @param {Phonic.UpsertAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.BadRequestError}
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.agents.upsert({
     *         project: "main",
     *         name: "support-agent",
     *         phone_number: "assign-automatically",
     *         timezone: "America/Los_Angeles",
     *         voice_id: "grant",
     *         audio_speed: 1,
     *         background_noise_level: 0,
     *         welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *         system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *         template_variables: {
     *             "customer_name": {},
     *             "subject": {
     *                 default_value: "Chess"
     *             }
     *         },
     *         tools: ["keypad_input"],
     *         no_input_poke_sec: 30,
     *         no_input_poke_text: "Are you still there?",
     *         recognized_languages: ["en", "es"],
     *         boosted_keywords: ["Load ID", "dispatch"],
     *         configuration_endpoint: {
     *             url: "https://api.example.com/config",
     *             headers: {
     *                 "Authorization": "Bearer token123"
     *             },
     *             timeout_ms: 7000
     *         }
     *     })
     */
    public upsert(
        request: Phonic.UpsertAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Phonic.AgentsUpsertResponse> {
        return core.HttpResponsePromise.fromPromise(this.__upsert(request, requestOptions));
    }

    private async __upsert(
        request: Phonic.UpsertAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.AgentsUpsertResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "agents/upsert",
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.AgentsUpsertResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Phonic.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling PUT /agents/upsert.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns an agent by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the agent to get.
     * @param {Phonic.AgentsGetRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.ForbiddenError}
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.agents.get("nameOrId", {
     *         project: "main"
     *     })
     */
    public get(
        nameOrId: string,
        request: Phonic.AgentsGetRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Phonic.AgentsGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, request, requestOptions));
    }

    private async __get(
        nameOrId: string,
        request: Phonic.AgentsGetRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.AgentsGetResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `agents/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.AgentsGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Phonic.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling GET /agents/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an agent by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the agent to delete.
     * @param {Phonic.AgentsDeleteRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.ForbiddenError}
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.agents.delete("nameOrId", {
     *         project: "main"
     *     })
     */
    public delete(
        nameOrId: string,
        request: Phonic.AgentsDeleteRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Phonic.AgentsDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, request, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        request: Phonic.AgentsDeleteRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.AgentsDeleteResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `agents/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.AgentsDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Phonic.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling DELETE /agents/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an agent by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the agent to update.
     * @param {Phonic.UpdateAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.BadRequestError}
     * @throws {@link Phonic.ForbiddenError}
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.agents.update("nameOrId", {
     *         project: "main",
     *         name: "updated-support-agent",
     *         phone_number: "assign-automatically",
     *         timezone: "America/Los_Angeles",
     *         voice_id: "grant",
     *         audio_speed: 1,
     *         background_noise_level: 0,
     *         welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *         system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *         template_variables: {
     *             "customer_name": {},
     *             "subject": {
     *                 default_value: "Chess"
     *             }
     *         },
     *         tools: ["keypad_input"],
     *         no_input_poke_sec: 30,
     *         no_input_poke_text: "Are you still there?",
     *         recognized_languages: ["en", "es"],
     *         boosted_keywords: ["Load ID", "dispatch"],
     *         configuration_endpoint: {
     *             url: "https://api.example.com/config",
     *             headers: {
     *                 "Authorization": "Bearer token123"
     *             },
     *             timeout_ms: 7000
     *         }
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Phonic.AgentsUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.AgentsUpdateResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `agents/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.AgentsUpdateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Phonic.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Phonic.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling PATCH /agents/{nameOrId}.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["PHONIC_API_KEY"];
        if (bearer == null) {
            throw new errors.PhonicError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a PHONIC_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
