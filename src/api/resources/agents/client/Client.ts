/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";

export declare namespace Agents {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Agents {
    protected readonly _options: Agents.Options;

    constructor(_options: Agents.Options) {
        this._options = _options;
    }

    /**
     * Returns all agents in a project.
     *
     * @param {Phonic.AgentsListRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.list()
     */
    public list(
        request: Phonic.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.AgentsListResponse, Phonic.agents.list.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Phonic.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.AgentsListResponse, Phonic.agents.list.Error>>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "agents",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.AgentsListResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.agents.list.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Creates a new agent in a project.
     *
     * @param {Phonic.AgentsCreateRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.create({
     *         body: {
     *             name: "support-agent",
     *             phone_number: "assign-automatically",
     *             timezone: "America/Los_Angeles",
     *             voice_id: "sarah",
     *             audio_speed: 1,
     *             welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *             system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *             template_variables: {
     *                 "customer_name": {},
     *                 "subject": {
     *                     default_value: "Chess"
     *                 }
     *             },
     *             tools: ["keypad_input"],
     *             no_input_poke_sec: 30,
     *             no_input_poke_text: "Are you still there?",
     *             boosted_keywords: ["Load ID", "dispatch"],
     *             configuration_endpoint: {
     *                 url: "https://api.example.com/config",
     *                 headers: {
     *                     "Authorization": "Bearer token123"
     *                 },
     *                 timeout_ms: 7000
     *             }
     *         }
     *     })
     */
    public create(
        request: Phonic.AgentsCreateRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.AgentsCreateResponse, Phonic.agents.create.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.AgentsCreateRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.AgentsCreateResponse, Phonic.agents.create.Error>>> {
        const { project, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "agents",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.AgentsCreateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.create.Error.badRequestError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.create.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.agents.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Upserts an agent by name. If an agent with the same name already exists, it will be updated. Otherwise, it will be created.
     *
     * @param {Phonic.UpsertAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.upsert({
     *         name: "support-agent",
     *         phone_number: "assign-automatically",
     *         timezone: "America/Los_Angeles",
     *         voice_id: "sarah",
     *         audio_speed: 1,
     *         welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *         system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *         template_variables: {
     *             "customer_name": {},
     *             "subject": {
     *                 default_value: "Chess"
     *             }
     *         },
     *         tools: ["keypad_input"],
     *         no_input_poke_sec: 30,
     *         no_input_poke_text: "Are you still there?",
     *         boosted_keywords: ["Load ID", "dispatch"],
     *         configuration_endpoint: {
     *             url: "https://api.example.com/config",
     *             headers: {
     *                 "Authorization": "Bearer token123"
     *             },
     *             timeout_ms: 7000
     *         }
     *     })
     */
    public upsert(
        request: Phonic.UpsertAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.AgentsUpsertResponse, Phonic.agents.upsert.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__upsert(request, requestOptions));
    }

    private async __upsert(
        request: Phonic.UpsertAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.AgentsUpsertResponse, Phonic.agents.upsert.Error>>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "agents/upsert",
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.AgentsUpsertResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.upsert.Error.badRequestError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.upsert.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.agents.upsert.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns an agent by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the agent to get.
     * @param {Phonic.AgentsGetRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.get("nameOrId")
     */
    public get(
        nameOrId: string,
        request: Phonic.AgentsGetRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.AgentsGetResponse, Phonic.agents.get.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, request, requestOptions));
    }

    private async __get(
        nameOrId: string,
        request: Phonic.AgentsGetRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.AgentsGetResponse, Phonic.agents.get.Error>>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `agents/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.AgentsGetResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.get.Error.forbiddenError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.get.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.agents.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Deletes an agent by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the agent to delete.
     * @param {Phonic.AgentsDeleteRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.delete("nameOrId")
     */
    public delete(
        nameOrId: string,
        request: Phonic.AgentsDeleteRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.AgentsDeleteResponse, Phonic.agents.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, request, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        request: Phonic.AgentsDeleteRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.AgentsDeleteResponse, Phonic.agents.delete.Error>>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `agents/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.AgentsDeleteResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.delete.Error.forbiddenError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.delete.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.agents.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Updates an agent by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the agent to update.
     * @param {Phonic.UpdateAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.update("nameOrId", {
     *         name: "updated-support-agent",
     *         phone_number: "assign-automatically",
     *         timezone: "America/Los_Angeles",
     *         voice_id: "sarah",
     *         audio_speed: 1,
     *         welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *         system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *         template_variables: {
     *             "customer_name": {},
     *             "subject": {
     *                 default_value: "Chess"
     *             }
     *         },
     *         tools: ["keypad_input"],
     *         no_input_poke_sec: 30,
     *         no_input_poke_text: "Are you still there?",
     *         boosted_keywords: ["Load ID", "dispatch"],
     *         configuration_endpoint: {
     *             url: "https://api.example.com/config",
     *             headers: {
     *                 "Authorization": "Bearer token123"
     *             },
     *             timeout_ms: 7000
     *         }
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.AgentsUpdateResponse, Phonic.agents.update.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.AgentsUpdateResponse, Phonic.agents.update.Error>>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `agents/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.AgentsUpdateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.update.Error.badRequestError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 403:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.update.Error.forbiddenError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.agents.update.Error.notFoundError(_response.error.body as Phonic.Error_),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.agents.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
