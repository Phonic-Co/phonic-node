/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Conversations {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Conversations {
    protected readonly _options: Conversations.Options;

    constructor(_options: Conversations.Options) {
        this._options = _options;
    }

    /**
     * Initiates a call to a given phone number.
     *
     * @param {Phonic.OutboundCallRequest} request
     * @param {Conversations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.conversations.outboundCall({
     *         to_phone_number: "+19189397081",
     *         config: {
     *             agent: "support-agent",
     *             welcome_message: "Hi {{customer_name}}. How can I help you today?",
     *             system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
     *             template_variables: {
     *                 "customer_name": "David",
     *                 "subject": "Chess"
     *             },
     *             voice_id: "sarah",
     *             no_input_poke_sec: 30,
     *             no_input_poke_text: "Are you still there?",
     *             no_input_end_conversation_sec: 180,
     *             boosted_keywords: ["Load ID", "dispatch"],
     *             tools: ["keypad_input"]
     *         }
     *     })
     */
    public outboundCall(
        request: Phonic.OutboundCallRequest,
        requestOptions?: Conversations.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ConversationsOutboundCallResponse> {
        return core.HttpResponsePromise.fromPromise(this.__outboundCall(request, requestOptions));
    }

    private async __outboundCall(
        request: Phonic.OutboundCallRequest,
        requestOptions?: Conversations.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ConversationsOutboundCallResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "conversations/outbound_call",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Phonic.ConversationsOutboundCallResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PhonicError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling POST /conversations/outbound_call.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
