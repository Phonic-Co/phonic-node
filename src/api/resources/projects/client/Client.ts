/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";

export declare namespace Projects {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Projects {
    protected readonly _options: Projects.Options;

    constructor(_options: Projects.Options) {
        this._options = _options;
    }

    /**
     * Returns all projects in a workspace.
     *
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.list()
     */
    public list(
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ProjectsListResponse, Phonic.projects.list.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ProjectsListResponse, Phonic.projects.list.Error>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "projects",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ProjectsListResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.projects.list.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Creates a new project in a workspace.
     *
     * @param {Phonic.CreateProjectRequest} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.create({
     *         name: "customer-support"
     *     })
     */
    public create(
        request: Phonic.CreateProjectRequest,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ProjectsCreateResponse, Phonic.projects.create.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.CreateProjectRequest,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ProjectsCreateResponse, Phonic.projects.create.Error>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "projects",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ProjectsCreateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.projects.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns a project by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the project to get.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.get("nameOrId")
     */
    public get(
        nameOrId: string,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ProjectsGetResponse, Phonic.projects.get.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, requestOptions));
    }

    private async __get(
        nameOrId: string,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ProjectsGetResponse, Phonic.projects.get.Error>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ProjectsGetResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.projects.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Deletes a project by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the project to delete.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.delete("nameOrId")
     */
    public delete(
        nameOrId: string,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ProjectsDeleteResponse, Phonic.projects.delete.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ProjectsDeleteResponse, Phonic.projects.delete.Error>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ProjectsDeleteResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.projects.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Updates a project by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the project to update.
     * @param {Phonic.UpdateProjectRequest} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.update("nameOrId", {
     *         name: "updated-customer-support",
     *         default_agent: "another-agent"
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateProjectRequest = {},
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<Phonic.ProjectsUpdateResponse, Phonic.projects.update.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateProjectRequest = {},
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<Phonic.ProjectsUpdateResponse, Phonic.projects.update.Error>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ProjectsUpdateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.projects.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns all conversation evaluation prompts for a project.
     *
     * @param {string} id - The ID of the project.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.listEvalPrompts("id")
     */
    public listEvalPrompts(
        id: string,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Phonic.ProjectsListEvalPromptsResponse, Phonic.projects.listEvalPrompts.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__listEvalPrompts(id, requestOptions));
    }

    private async __listEvalPrompts(
        id: string,
        requestOptions?: Projects.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<Phonic.ProjectsListEvalPromptsResponse, Phonic.projects.listEvalPrompts.Error>
        >
    > {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(id)}/conversation_eval_prompts`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ProjectsListEvalPromptsResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.projects.listEvalPrompts.Error.notFoundError(
                                _response.error.body as Phonic.Error_,
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.projects.listEvalPrompts.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Creates a new conversation evaluation prompt for a project.
     *
     * @param {string} id - The ID of the project.
     * @param {Phonic.CreateConversationEvalPromptRequest} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.projects.createEvalPrompt("id", {
     *         name: "test_prompt",
     *         prompt: "The assistant used the word chocolate in the conversation"
     *     })
     */
    public createEvalPrompt(
        id: string,
        request: Phonic.CreateConversationEvalPromptRequest,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Phonic.ProjectsCreateEvalPromptResponse, Phonic.projects.createEvalPrompt.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__createEvalPrompt(id, request, requestOptions));
    }

    private async __createEvalPrompt(
        id: string,
        request: Phonic.CreateConversationEvalPromptRequest,
        requestOptions?: Projects.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<Phonic.ProjectsCreateEvalPromptResponse, Phonic.projects.createEvalPrompt.Error>
        >
    > {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `projects/${encodeURIComponent(id)}/conversation_eval_prompts`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ProjectsCreateEvalPromptResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    return {
                        data: {
                            ok: false,
                            error: Phonic.projects.createEvalPrompt.Error.notFoundError(
                                _response.error.body as Phonic.Error_,
                            ),
                            rawResponse: _response.rawResponse,
                        },
                        rawResponse: _response.rawResponse,
                    };
            }
        }

        return {
            data: {
                ok: false,
                error: Phonic.projects.createEvalPrompt.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
