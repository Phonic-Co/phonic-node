/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";

export declare namespace ExtractionSchemas {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class ExtractionSchemas {
    protected readonly _options: ExtractionSchemas.Options;

    constructor(_options: ExtractionSchemas.Options) {
        this._options = _options;
    }

    /**
     * Returns all extraction schemas in a project.
     *
     * @param {Phonic.ExtractionSchemasListRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.extractionSchemas.list()
     */
    public list(
        request: Phonic.ExtractionSchemasListRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Phonic.ExtractionSchemasListResponse, Phonic.extractionSchemas.list.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Phonic.ExtractionSchemasListRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<Phonic.ExtractionSchemasListResponse, Phonic.extractionSchemas.list.Error>
        >
    > {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "extraction_schemas",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ExtractionSchemasListResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.extractionSchemas.list.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Creates a new extraction schema in a project.
     *
     * @param {Phonic.CreateExtractionSchemaRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.extractionSchemas.create({
     *         name: "Appointment details",
     *         prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
     *         fields: [{
     *                 name: "Date",
     *                 type: "string",
     *                 description: "The date of the appointment"
     *             }, {
     *                 name: "Copay",
     *                 type: "string",
     *                 description: "Amount of money the patient pays for the appointment"
     *             }, {
     *                 name: "Confirmed as booked",
     *                 type: "bool",
     *                 description: "Is the appointment confirmed as booked?"
     *             }]
     *     })
     */
    public create(
        request: Phonic.CreateExtractionSchemaRequest,
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Phonic.ExtractionSchemasCreateResponse, Phonic.extractionSchemas.create.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.CreateExtractionSchemaRequest,
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<Phonic.ExtractionSchemasCreateResponse, Phonic.extractionSchemas.create.Error>
        >
    > {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "extraction_schemas",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ExtractionSchemasCreateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.extractionSchemas.create.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns an extraction schema by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the extraction schema to get.
     * @param {Phonic.ExtractionSchemasGetRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.extractionSchemas.get("nameOrId")
     */
    public get(
        nameOrId: string,
        request: Phonic.ExtractionSchemasGetRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Phonic.ExtractionSchemasGetResponse, Phonic.extractionSchemas.get.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, request, requestOptions));
    }

    private async __get(
        nameOrId: string,
        request: Phonic.ExtractionSchemasGetRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<
        core.WithRawResponse<core.APIResponse<Phonic.ExtractionSchemasGetResponse, Phonic.extractionSchemas.get.Error>>
    > {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `extraction_schemas/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ExtractionSchemasGetResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.extractionSchemas.get.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Deletes an extraction schema by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the extraction schema to delete.
     * @param {Phonic.ExtractionSchemasDeleteRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.extractionSchemas.delete("nameOrId")
     */
    public delete(
        nameOrId: string,
        request: Phonic.ExtractionSchemasDeleteRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Phonic.ExtractionSchemasDeleteResponse, Phonic.extractionSchemas.delete.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, request, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        request: Phonic.ExtractionSchemasDeleteRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<Phonic.ExtractionSchemasDeleteResponse, Phonic.extractionSchemas.delete.Error>
        >
    > {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `extraction_schemas/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ExtractionSchemasDeleteResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.extractionSchemas.delete.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Updates an extraction schema by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the extraction schema to update.
     * @param {Phonic.UpdateExtractionSchemaRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.extractionSchemas.update("nameOrId", {
     *         name: "Updated appointment details",
     *         prompt: "Updated extraction instructions. Dates should be in `9 Apr 2025` format.",
     *         fields: [{
     *                 name: "Date",
     *                 type: "string",
     *                 description: "The date of the appointment"
     *             }, {
     *                 name: "Time",
     *                 type: "string",
     *                 description: "The time of the appointment"
     *             }]
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateExtractionSchemaRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Phonic.ExtractionSchemasUpdateResponse, Phonic.extractionSchemas.update.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateExtractionSchemaRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<Phonic.ExtractionSchemasUpdateResponse, Phonic.extractionSchemas.update.Error>
        >
    > {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `extraction_schemas/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Phonic.ExtractionSchemasUpdateResponse,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Phonic.extractionSchemas.update.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
