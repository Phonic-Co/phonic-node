/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Phonic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace ExtractionSchemas {
    export interface Options {
        environment?: core.Supplier<environments.PhonicEnvironment | environments.PhonicEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class ExtractionSchemas {
    protected readonly _options: ExtractionSchemas.Options;

    constructor(_options: ExtractionSchemas.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns all extraction schemas in a project.
     *
     * @param {Phonic.ExtractionSchemasListRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.extractionSchemas.list()
     */
    public list(
        request: Phonic.ExtractionSchemasListRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ExtractionSchemasListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Phonic.ExtractionSchemasListRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ExtractionSchemasListResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "extraction_schemas",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ExtractionSchemasListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling GET /extraction_schemas.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new extraction schema in a project.
     *
     * @param {Phonic.CreateExtractionSchemaRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.BadRequestError}
     * @throws {@link Phonic.NotFoundError}
     * @throws {@link Phonic.ConflictError}
     *
     * @example
     *     await client.extractionSchemas.create({
     *         name: "Appointment details",
     *         prompt: "Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
     *         fields: [{
     *                 name: "Date",
     *                 type: "string",
     *                 description: "The date of the appointment"
     *             }, {
     *                 name: "Copay",
     *                 type: "string",
     *                 description: "Amount of money the patient pays for the appointment"
     *             }, {
     *                 name: "Confirmed as booked",
     *                 type: "bool",
     *                 description: "Is the appointment confirmed as booked?"
     *             }]
     *     })
     */
    public create(
        request: Phonic.CreateExtractionSchemaRequest,
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ExtractionSchemasCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Phonic.CreateExtractionSchemaRequest,
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ExtractionSchemasCreateResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                "extraction_schemas",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Phonic.ExtractionSchemasCreateResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Phonic.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Phonic.ConflictError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError("Timeout exceeded when calling POST /extraction_schemas.");
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns an extraction schema by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the extraction schema to get.
     * @param {Phonic.ExtractionSchemasGetRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.extractionSchemas.get("nameOrId")
     */
    public get(
        nameOrId: string,
        request: Phonic.ExtractionSchemasGetRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ExtractionSchemasGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(nameOrId, request, requestOptions));
    }

    private async __get(
        nameOrId: string,
        request: Phonic.ExtractionSchemasGetRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ExtractionSchemasGetResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `extraction_schemas/${encodeURIComponent(nameOrId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Phonic.ExtractionSchemasGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError(
                    "Timeout exceeded when calling GET /extraction_schemas/{nameOrId}.",
                );
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an extraction schema by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the extraction schema to delete.
     * @param {Phonic.ExtractionSchemasDeleteRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.NotFoundError}
     *
     * @example
     *     await client.extractionSchemas.delete("nameOrId")
     */
    public delete(
        nameOrId: string,
        request: Phonic.ExtractionSchemasDeleteRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ExtractionSchemasDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(nameOrId, request, requestOptions));
    }

    private async __delete(
        nameOrId: string,
        request: Phonic.ExtractionSchemasDeleteRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ExtractionSchemasDeleteResponse>> {
        const { project } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `extraction_schemas/${encodeURIComponent(nameOrId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Phonic.ExtractionSchemasDeleteResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError(
                    "Timeout exceeded when calling DELETE /extraction_schemas/{nameOrId}.",
                );
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an extraction schema by name or ID.
     *
     * @param {string} nameOrId - The name or the ID of the extraction schema to update.
     * @param {Phonic.UpdateExtractionSchemaRequest} request
     * @param {ExtractionSchemas.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Phonic.BadRequestError}
     * @throws {@link Phonic.NotFoundError}
     * @throws {@link Phonic.ConflictError}
     *
     * @example
     *     await client.extractionSchemas.update("nameOrId", {
     *         name: "Updated appointment details",
     *         prompt: "Updated extraction instructions. Dates should be in `9 Apr 2025` format.",
     *         fields: [{
     *                 name: "Date",
     *                 type: "string",
     *                 description: "The date of the appointment"
     *             }, {
     *                 name: "Time",
     *                 type: "string",
     *                 description: "The time of the appointment"
     *             }]
     *     })
     */
    public update(
        nameOrId: string,
        request: Phonic.UpdateExtractionSchemaRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): core.HttpResponsePromise<Phonic.ExtractionSchemasUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(nameOrId, request, requestOptions));
    }

    private async __update(
        nameOrId: string,
        request: Phonic.UpdateExtractionSchemaRequest = {},
        requestOptions?: ExtractionSchemas.RequestOptions,
    ): Promise<core.WithRawResponse<Phonic.ExtractionSchemasUpdateResponse>> {
        const { project, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.PhonicEnvironment.Default)
                        .base,
                `extraction_schemas/${encodeURIComponent(nameOrId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Phonic.ExtractionSchemasUpdateResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Phonic.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Phonic.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Phonic.ConflictError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PhonicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PhonicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PhonicTimeoutError(
                    "Timeout exceeded when calling PATCH /extraction_schemas/{nameOrId}.",
                );
            case "unknown":
                throw new errors.PhonicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["PHONIC_API_KEY"];
        if (bearer == null) {
            throw new errors.PhonicError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a PHONIC_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
